/*
 * Copyright 2023 Squircle CE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.rust.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>rust.flex</tt>
 */
public class RustLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int IN_RAW_LITERAL = 2;
  public static final int IN_RAW_LITERAL_SUFFIX = 4;
  public static final int IN_LIFETIME_OR_CHAR = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00"+
    "\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u1f00\1\u5000\1\u5100"+
    "\1\u5200\1\u5300\3\u0100\1\u5400\1\u5500\1\u5600\12\u1f00\4\u0100"+
    "\1\u5700\17\u1f00\2\u0100\1\u5800\41\u1f00\2\u0100\1\u5900\1\u5a00"+
    "\2\u1f00\1\u5b00\1\u5c00\27\u0100\1\u5d00\2\u0100\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\42\u1f00\1\u0100\1\u6200\1\u6300\11\u1f00\1\u6400"+
    "\24\u1f00\1\u6500\1\u6600\1\u1f00\1\u6700\1\u6800\1\u6900\1\u6a00"+
    "\2\u1f00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\1\u6e00\5\u1f00\1\u6f00"+
    "\1\u7000\2\u1f00\1\u7100\1\u1f00\1\u7200\14\u1f00\1\u7300\4\u1f00"+
    "\246\u0100\1\u7400\20\u0100\1\u7500\1\u7600\25\u0100\1\u7700\34\u0100"+
    "\1\u7800\14\u1f00\2\u0100\1\u7900\5\u1f00\23\u5f00\1\u7a00\u0aec\u1f00"+
    "\1\u7b00\1\u7c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\33"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\4\46\1\47\1\46\14\50\1\51\7\50\1\52"+
    "\1\53\1\54\1\55\1\56\1\6\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\50\1\65\1\66\1\50\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\50\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\6\0\1\112\32\0\2\6\4\113"+
    "\4\6\1\50\2\6\1\0\7\6\1\50\1\6\1\114"+
    "\2\6\1\50\5\6\27\50\1\6\37\50\1\6\u01ca\50"+
    "\4\6\14\50\16\6\5\50\7\6\1\50\1\6\1\50"+
    "\21\6\160\115\5\50\1\6\2\50\2\6\1\113\3\50"+
    "\1\6\1\50\6\6\1\50\1\114\3\50\1\6\1\50"+
    "\1\6\24\50\1\6\123\50\1\6\213\50\1\6\5\115"+
    "\2\6\246\50\1\6\46\50\2\6\1\50\6\6\51\50"+
    "\6\6\1\113\1\6\55\115\1\6\1\115\1\6\2\115"+
    "\1\6\2\115\1\6\1\115\10\6\33\50\4\6\4\50"+
    "\15\6\6\0\5\6\1\113\4\6\13\115\1\6\1\0"+
    "\3\6\53\50\37\115\4\6\2\50\1\115\143\50\1\6"+
    "\1\50\7\115\1\0\1\6\6\115\2\50\2\115\1\6"+
    "\4\115\2\50\12\115\3\50\2\6\1\50\17\6\1\0"+
    "\1\50\1\115\36\50\33\115\2\6\131\50\13\115\1\50"+
    "\16\6\12\115\41\50\11\115\2\50\4\6\1\50\2\6"+
    "\1\115\2\113\26\50\4\115\1\50\11\115\1\50\3\115"+
    "\1\50\5\115\22\6\31\50\3\115\4\6\13\50\65\6"+
    "\25\50\1\6\10\50\12\113\13\6\17\115\1\0\41\115"+
    "\66\50\3\115\1\50\22\115\1\50\7\115\12\50\2\115"+
    "\2\6\12\115\1\6\20\50\3\115\1\6\10\50\2\6"+
    "\2\50\2\6\26\50\1\6\7\50\1\6\1\50\3\6"+
    "\4\50\2\6\1\115\1\50\7\115\2\6\2\115\2\6"+
    "\3\115\1\50\10\6\1\115\4\6\2\50\1\6\3\50"+
    "\2\115\2\6\12\115\2\50\2\113\7\6\1\113\1\50"+
    "\1\6\1\115\2\6\3\115\1\6\6\50\4\6\2\50"+
    "\2\6\26\50\1\6\7\50\1\6\2\50\1\6\2\50"+
    "\1\6\2\50\2\6\1\115\1\6\5\115\4\6\2\115"+
    "\2\6\3\115\3\6\1\115\7\6\4\50\1\6\1\50"+
    "\7\6\14\115\3\50\1\115\13\6\3\115\1\6\11\50"+
    "\1\6\3\50\1\6\26\50\1\6\7\50\1\6\2\50"+
    "\1\6\5\50\2\6\1\115\1\50\10\115\1\6\3\115"+
    "\1\6\3\115\2\6\1\50\17\6\2\50\2\115\2\6"+
    "\12\115\1\6\1\113\7\6\1\50\6\115\1\6\3\115"+
    "\1\6\10\50\2\6\2\50\2\6\26\50\1\6\7\50"+
    "\1\6\2\50\1\6\5\50\2\6\1\115\1\50\7\115"+
    "\2\6\2\115\2\6\3\115\7\6\1\0\2\115\4\6"+
    "\2\50\1\6\3\50\2\115\2\6\12\115\1\6\1\50"+
    "\20\6\1\115\1\50\1\6\6\50\3\6\3\50\1\6"+
    "\4\50\3\6\2\50\1\6\1\50\1\6\2\50\3\6"+
    "\2\50\3\6\3\50\3\6\14\50\4\6\5\115\3\6"+
    "\3\115\1\6\4\115\2\6\1\50\6\6\1\115\16\6"+
    "\12\115\11\6\1\113\6\6\5\115\10\50\1\6\3\50"+
    "\1\6\27\50\1\6\20\50\3\6\1\50\7\115\1\6"+
    "\3\115\1\6\4\115\7\6\2\115\1\6\3\50\5\6"+
    "\2\50\2\115\2\6\12\115\20\6\1\50\3\115\1\6"+
    "\10\50\1\6\3\50\1\6\27\50\1\6\12\50\1\6"+
    "\5\50\2\6\1\115\1\50\7\115\1\6\3\115\1\6"+
    "\4\115\7\6\2\115\7\6\1\50\1\6\2\50\2\115"+
    "\2\6\12\115\1\6\2\50\15\6\4\115\1\113\10\50"+
    "\1\6\3\50\1\6\51\50\2\115\1\50\7\115\1\6"+
    "\3\115\1\6\4\115\1\50\5\6\3\50\1\115\7\6"+
    "\3\50\2\115\2\6\12\115\12\6\6\50\1\6\1\0"+
    "\2\115\1\6\22\50\3\6\30\50\1\6\11\50\1\6"+
    "\1\50\2\6\7\50\3\6\1\115\4\6\6\115\1\6"+
    "\1\115\1\6\10\115\6\6\12\115\2\6\2\115\15\6"+
    "\60\50\1\115\1\50\1\116\7\115\4\6\1\113\7\50"+
    "\10\115\1\6\12\115\47\6\2\50\1\6\1\50\1\6"+
    "\5\50\1\6\30\50\1\6\1\50\1\6\12\50\1\115"+
    "\1\50\1\116\11\115\1\50\2\6\5\50\1\6\1\50"+
    "\1\6\6\115\2\6\12\115\2\6\4\50\40\6\1\50"+
    "\27\6\2\115\6\6\12\115\13\6\1\115\1\6\1\115"+
    "\1\6\1\115\4\6\2\115\10\50\1\6\44\50\4\6"+
    "\24\115\1\6\2\115\5\50\13\115\1\6\44\115\11\6"+
    "\1\115\71\6\53\50\24\115\1\50\12\115\6\6\6\50"+
    "\4\115\4\50\3\115\1\50\3\115\2\50\7\115\3\50"+
    "\4\115\15\50\14\115\1\50\17\115\2\6\46\50\1\6"+
    "\1\50\5\6\1\50\2\6\53\50\1\6\115\50\1\6"+
    "\4\50\2\6\7\50\1\6\1\50\1\6\4\50\2\6"+
    "\51\50\1\6\4\50\2\6\41\50\1\6\4\50\2\6"+
    "\7\50\1\6\1\50\1\6\4\50\2\6\17\50\1\6"+
    "\71\50\1\6\4\50\2\6\103\50\2\6\3\115\11\6"+
    "\11\114\16\6\20\50\20\6\126\50\2\6\6\50\3\6"+
    "\u016c\50\2\6\21\50\1\6\32\50\5\6\113\50\3\6"+
    "\13\50\7\6\15\50\1\6\4\50\3\115\13\6\22\50"+
    "\3\115\13\6\22\50\2\115\14\6\15\50\1\6\3\50"+
    "\1\6\2\115\14\6\64\50\40\115\3\6\1\50\3\6"+
    "\1\113\1\50\1\115\2\6\12\115\41\6\3\115\1\0"+
    "\1\6\12\115\6\6\131\50\7\6\5\50\2\117\42\50"+
    "\1\115\1\50\5\6\106\50\12\6\37\50\1\6\14\115"+
    "\4\6\14\115\12\6\12\115\36\50\2\6\5\50\13\6"+
    "\54\50\4\6\32\50\6\6\12\115\1\114\45\6\27\50"+
    "\5\115\4\6\65\50\12\115\1\6\35\115\2\6\13\115"+
    "\6\6\12\115\15\6\1\50\10\6\16\115\1\6\2\0"+
    "\77\6\5\115\57\50\21\115\7\50\4\6\12\115\21\6"+
    "\11\115\14\6\3\115\36\50\15\115\2\50\12\115\54\50"+
    "\16\115\14\6\44\50\24\115\10\6\12\115\3\6\3\50"+
    "\12\115\44\50\2\6\11\50\7\6\53\50\2\6\3\50"+
    "\20\6\3\115\1\6\25\115\4\50\1\115\6\50\1\115"+
    "\2\50\3\115\1\50\5\6\300\50\72\115\1\6\5\115"+
    "\26\50\2\6\6\50\2\6\46\50\2\6\6\50\2\6"+
    "\10\50\1\6\1\50\1\6\1\50\1\6\1\50\1\6"+
    "\37\50\2\6\65\50\1\6\7\50\1\6\1\50\3\6"+
    "\3\50\1\6\7\50\3\6\4\50\2\6\6\50\4\6"+
    "\15\50\5\6\3\50\1\6\7\50\16\6\5\0\30\6"+
    "\2\3\5\0\20\6\2\116\23\6\1\116\13\6\5\0"+
    "\1\6\12\0\1\6\1\50\15\6\1\50\20\6\15\50"+
    "\3\6\40\113\20\6\15\115\4\6\1\115\3\6\14\115"+
    "\21\6\1\50\4\6\1\50\2\6\12\50\1\6\1\50"+
    "\2\6\1\120\5\50\6\6\1\50\1\6\1\50\1\6"+
    "\1\50\1\6\4\50\1\120\13\50\2\6\4\50\5\6"+
    "\5\50\4\6\1\50\21\6\51\50\u0177\6\57\50\1\6"+
    "\57\50\1\6\205\50\6\6\4\50\3\115\2\50\14\6"+
    "\46\50\1\6\1\50\5\6\1\50\2\6\70\50\7\6"+
    "\1\50\17\6\1\115\27\50\11\6\7\50\1\6\7\50"+
    "\1\6\7\50\1\6\7\50\1\6\7\50\1\6\7\50"+
    "\1\6\7\50\1\6\7\50\1\6\40\115\57\6\1\113"+
    "\325\6\3\50\31\6\11\50\6\115\1\6\5\50\2\6"+
    "\5\50\4\6\126\50\2\6\2\115\2\6\3\50\1\6"+
    "\132\50\1\6\4\50\5\6\53\50\1\6\136\50\21\6"+
    "\33\50\5\113\60\6\306\50\12\113\100\6\360\50\15\113"+
    "\3\6\215\50\103\6\56\50\2\6\15\50\3\6\20\50"+
    "\12\115\2\50\24\6\57\50\1\115\4\6\12\115\1\6"+
    "\37\50\2\115\120\50\2\115\45\6\11\50\2\6\147\50"+
    "\2\6\65\50\2\6\5\50\4\113\52\6\2\113\13\50"+
    "\1\115\3\50\1\115\4\50\1\115\27\50\5\115\4\6"+
    "\1\0\13\6\1\113\7\6\64\50\14\6\2\115\62\50"+
    "\22\115\12\6\12\115\6\6\22\115\6\50\3\6\1\50"+
    "\1\6\2\50\13\115\34\50\10\115\2\6\27\50\15\115"+
    "\14\6\35\50\3\6\4\115\57\50\16\115\16\6\1\50"+
    "\12\115\6\6\5\50\1\115\12\50\12\115\5\50\1\6"+
    "\51\50\16\115\11\6\3\50\1\115\10\50\2\115\2\6"+
    "\12\115\6\6\27\50\3\6\1\50\3\115\62\50\1\115"+
    "\1\50\3\115\2\50\2\115\5\50\2\115\1\50\1\115"+
    "\1\50\30\6\3\50\2\6\13\50\5\115\2\6\3\50"+
    "\2\115\12\6\6\50\2\6\6\50\2\6\6\50\11\6"+
    "\7\50\1\6\7\50\1\6\53\50\1\6\14\50\2\113"+
    "\6\6\163\50\10\115\1\6\2\115\2\6\12\115\6\6"+
    "\244\50\14\6\27\50\4\6\61\50\4\6\u0100\3\156\50"+
    "\2\6\152\50\46\6\7\50\14\6\5\50\5\6\1\50"+
    "\1\115\12\50\1\6\15\50\1\6\5\50\1\6\1\50"+
    "\1\6\2\50\1\6\2\50\1\6\154\50\41\6\213\50"+
    "\6\113\332\50\22\6\100\50\2\6\66\50\50\6\12\50"+
    "\3\113\3\6\20\115\20\6\20\115\3\6\2\116\30\6"+
    "\3\116\31\6\1\113\6\6\1\113\1\50\1\113\1\50"+
    "\1\113\1\6\1\113\1\50\1\113\1\50\1\113\1\50"+
    "\1\113\1\50\1\113\176\50\2\6\1\0\4\6\1\113"+
    "\13\6\12\115\7\6\32\50\4\6\1\116\1\6\32\50"+
    "\13\6\70\50\2\116\37\50\3\6\6\50\2\6\6\50"+
    "\2\6\6\50\2\6\3\50\3\6\2\113\3\6\2\113"+
    "\22\6\3\0\4\6\14\50\1\6\32\50\1\6\23\50"+
    "\1\6\2\50\1\6\17\50\2\6\16\50\42\6\173\50"+
    "\105\6\65\50\210\6\1\115\202\6\35\50\3\6\61\50"+
    "\17\6\1\115\37\6\40\50\15\6\36\50\5\6\46\50"+
    "\5\115\5\6\36\50\2\6\44\50\4\6\10\50\1\6"+
    "\5\50\52\6\236\50\2\6\12\115\6\6\44\50\4\6"+
    "\44\50\4\6\50\50\10\6\64\50\234\6\67\50\11\6"+
    "\26\50\12\6\10\50\230\6\6\50\2\6\1\50\1\6"+
    "\54\50\1\6\2\50\3\6\1\50\2\6\27\50\12\6"+
    "\27\50\11\6\37\50\101\6\23\50\1\6\2\50\12\6"+
    "\26\50\12\6\32\50\106\6\70\50\6\6\2\50\100\6"+
    "\1\50\3\115\1\6\2\115\5\6\4\115\4\50\1\6"+
    "\3\50\1\6\35\50\2\6\3\115\4\6\1\115\40\6"+
    "\35\50\3\6\35\50\43\6\10\50\1\6\34\50\2\115"+
    "\31\6\66\50\12\6\26\50\12\6\23\50\15\6\22\50"+
    "\156\6\111\50\67\6\63\50\15\6\63\50\15\6\44\50"+
    "\4\115\10\6\12\115\u0146\6\52\113\1\6\2\0\3\6"+
    "\2\113\116\6\35\50\12\6\1\50\10\6\26\50\13\115"+
    "\137\6\25\113\33\6\27\50\11\6\3\115\65\50\17\115"+
    "\37\6\12\115\17\6\4\115\55\50\13\115\2\6\1\0"+
    "\17\6\1\0\2\6\31\50\7\6\12\115\6\6\3\115"+
    "\44\50\16\115\1\6\12\115\4\6\1\50\2\115\1\113"+
    "\10\6\43\50\1\115\2\6\1\50\11\6\3\115\60\50"+
    "\16\115\4\50\4\6\4\115\1\6\2\0\12\115\1\50"+
    "\1\6\1\50\43\6\22\50\1\6\31\50\14\115\6\6"+
    "\1\115\101\6\7\50\1\6\1\50\1\6\4\50\1\6"+
    "\17\50\1\6\12\50\7\6\57\50\14\115\5\6\12\115"+
    "\6\6\4\115\1\6\10\50\2\6\2\50\2\6\26\50"+
    "\1\6\7\50\1\6\2\50\1\6\5\50\1\6\2\115"+
    "\1\50\7\115\2\6\2\115\2\6\3\115\2\6\1\50"+
    "\6\6\1\115\5\6\5\50\2\115\2\6\7\115\3\6"+
    "\5\115\213\6\65\50\22\115\4\50\5\6\12\115\4\6"+
    "\1\115\1\50\2\113\36\6\60\50\24\115\2\50\1\6"+
    "\1\50\10\6\12\115\246\6\57\50\7\115\2\6\11\115"+
    "\27\6\4\50\2\115\42\6\60\50\21\115\3\6\1\50"+
    "\13\6\12\115\46\6\53\50\15\115\1\50\7\6\12\115"+
    "\66\6\33\50\2\6\17\115\4\6\12\115\306\6\54\50"+
    "\17\115\145\6\100\50\12\115\25\6\1\50\7\113\2\6"+
    "\1\113\2\6\10\113\1\6\2\113\1\6\30\113\6\0"+
    "\1\6\2\0\2\6\4\0\1\113\1\0\1\113\2\0"+
    "\14\6\12\0\106\6\10\50\2\6\47\50\7\115\2\6"+
    "\7\115\1\50\1\6\1\50\1\115\33\6\1\50\12\115"+
    "\50\50\7\115\1\50\4\115\10\6\1\115\10\6\1\50"+
    "\13\115\56\50\20\115\3\6\1\50\42\6\71\50\7\6"+
    "\11\50\1\6\45\50\10\115\1\6\10\115\1\50\17\6"+
    "\12\115\30\6\36\50\2\6\26\115\1\6\16\115\111\6"+
    "\7\50\1\6\2\50\1\6\46\50\6\115\3\6\1\115"+
    "\1\6\2\115\1\6\7\115\1\50\1\115\10\6\12\115"+
    "\6\6\6\50\1\6\2\50\1\6\40\50\5\115\1\6"+
    "\2\115\1\6\5\115\1\50\7\6\12\115\u0136\6\23\50"+
    "\4\115\271\6\1\113\54\6\4\113\37\6\232\50\146\6"+
    "\157\50\21\6\304\50\274\6\57\50\1\6\11\0\307\6"+
    "\107\50\271\6\71\50\7\6\37\50\1\6\12\115\146\6"+
    "\36\50\2\6\5\115\13\6\60\50\7\115\11\6\4\50"+
    "\14\6\12\115\11\6\25\50\5\6\23\50\260\6\100\50"+
    "\200\6\113\50\4\6\1\115\1\50\67\115\7\6\4\115"+
    "\15\50\100\6\2\50\1\6\1\50\1\0\13\6\2\0"+
    "\16\6\370\50\10\6\363\50\u01e3\113\52\6\11\113\367\6"+
    "\37\50\61\6\3\50\21\6\4\50\10\6\u018c\50\4\6"+
    "\153\50\5\6\15\50\3\6\11\50\7\6\12\50\3\6"+
    "\2\115\1\6\4\0\301\6\5\115\3\6\6\115\10\0"+
    "\10\115\2\6\7\115\36\6\4\115\224\6\3\115\273\6"+
    "\125\50\1\6\107\50\1\6\2\50\2\6\1\50\2\6"+
    "\2\50\2\6\4\50\1\6\14\50\1\6\1\50\1\6"+
    "\7\50\1\6\101\50\1\6\4\50\2\6\10\50\1\6"+
    "\7\50\1\6\34\50\1\6\4\50\1\6\5\50\1\6"+
    "\1\50\3\6\7\50\1\6\u0154\50\2\6\31\50\1\6"+
    "\31\50\1\6\37\50\1\6\31\50\1\6\37\50\1\6"+
    "\31\50\1\6\37\50\1\6\31\50\1\6\37\50\1\6"+
    "\31\50\1\6\10\50\2\6\151\115\4\6\62\115\10\6"+
    "\1\115\16\6\1\115\26\6\5\115\1\6\17\115\120\6"+
    "\7\115\1\6\21\115\2\6\7\115\1\6\2\115\1\6"+
    "\5\115\325\6\55\50\3\6\7\115\7\50\2\6\12\115"+
    "\4\6\1\50\u0171\6\54\50\16\115\5\6\1\113\305\50"+
    "\13\6\7\115\51\6\104\50\7\115\1\50\4\6\12\115"+
    "\u0156\6\1\113\117\6\4\50\1\6\33\50\1\6\2\50"+
    "\1\6\1\50\2\6\1\50\1\6\12\50\1\6\4\50"+
    "\1\6\1\50\1\6\1\50\6\6\1\50\4\6\1\50"+
    "\1\6\1\50\1\6\1\50\1\6\3\50\1\6\2\50"+
    "\1\6\1\50\2\6\1\50\1\6\1\50\1\6\1\50"+
    "\1\6\1\50\1\6\1\50\1\6\2\50\1\6\1\50"+
    "\2\6\4\50\1\6\7\50\1\6\4\50\1\6\4\50"+
    "\1\6\1\50\1\6\12\50\1\6\21\50\5\6\3\50"+
    "\1\6\5\50\1\6\21\50\u0134\6\12\0\6\6\327\50"+
    "\7\113\42\6\65\50\13\6\336\50\2\6\u0182\50\16\6"+
    "\u0131\50\37\6\36\50\342\6\113\113\266\6\1\0\36\6"+
    "\140\0\200\6\360\115\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32000];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\2\32\1\33\1\34\1\35\20\32\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\45\1\46"+
    "\1\47\2\4\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\0\3\22\1\63"+
    "\1\64\1\65\1\32\1\66\1\67\1\70\1\71\13\32"+
    "\1\72\4\32\1\73\1\74\1\32\1\75\7\32\1\76"+
    "\1\1\11\32\1\77\4\32\1\100\1\0\3\46\1\101"+
    "\1\46\1\101\2\4\1\50\1\102\1\103\2\0\2\22"+
    "\1\32\2\70\4\71\1\104\1\105\1\1\3\32\1\106"+
    "\3\32\1\107\1\110\1\32\1\111\1\32\1\112\1\113"+
    "\1\114\2\32\1\115\3\32\1\116\1\32\1\117\1\120"+
    "\1\121\11\32\1\122\1\123\1\124\1\32\1\125\4\32"+
    "\3\46\1\0\1\101\2\46\2\0\1\60\1\126\2\70"+
    "\3\71\1\0\2\71\4\32\1\127\1\130\2\32\1\131"+
    "\1\132\1\32\1\133\2\32\1\134\1\32\1\135\4\32"+
    "\1\136\1\137\1\140\5\32\2\0\1\101\3\0\1\141"+
    "\1\142\1\32\1\143\1\32\1\144\1\145\1\146\1\147"+
    "\3\32\1\150\1\151\1\32\1\152\1\153\1\154\1\155"+
    "\1\46\1\71\1\32\1\156\1\157\1\160\1\161\1\162"+
    "\1\32\1\163";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\u0144\0\u0144\0\u0195\0\u01e6"+
    "\0\u0237\0\u0288\0\u02d9\0\u032a\0\u037b\0\u0144\0\u0144\0\u0144"+
    "\0\u03cc\0\u041d\0\u0144\0\u046e\0\u04bf\0\u0510\0\u0561\0\u05b2"+
    "\0\u0603\0\u0144\0\u0144\0\u0654\0\u0144\0\u0144\0\u0144\0\u02d9"+
    "\0\u06a5\0\u0144\0\u0144\0\u06f6\0\u0747\0\u0798\0\u07e9\0\u083a"+
    "\0\u088b\0\u08dc\0\u092d\0\u097e\0\u09cf\0\u0a20\0\u0a71\0\u0ac2"+
    "\0\u0b13\0\u0b64\0\u0bb5\0\u0c06\0\u0144\0\u0c57\0\u0144\0\u0144"+
    "\0\u0144\0\u0ca8\0\u0144\0\u0cf9\0\u0d4a\0\u0d9b\0\u0144\0\u0dec"+
    "\0\u0e3d\0\u0e8e\0\u0144\0\u0144\0\u0144\0\u0144\0\u0144\0\u0144"+
    "\0\u0edf\0\u0f30\0\u0f81\0\u0144\0\u0fd2\0\u1023\0\u1074\0\u10c5"+
    "\0\u0144\0\u0144\0\u0144\0\u1116\0\u0144\0\u02d9\0\u1167\0\u11b8"+
    "\0\u1209\0\u125a\0\u12ab\0\u12fc\0\u134d\0\u139e\0\u13ef\0\u1440"+
    "\0\u1491\0\u14e2\0\u1533\0\u02d9\0\u1584\0\u15d5\0\u1626\0\u1677"+
    "\0\u02d9\0\u02d9\0\u16c8\0\u02d9\0\u1719\0\u176a\0\u17bb\0\u180c"+
    "\0\u185d\0\u18ae\0\u18ff\0\u0144\0\u1950\0\u19a1\0\u19f2\0\u1a43"+
    "\0\u1a94\0\u1ae5\0\u1b36\0\u1b87\0\u1bd8\0\u1c29\0\u02d9\0\u1c7a"+
    "\0\u1ccb\0\u1d1c\0\u1d6d\0\u0144\0\u1dbe\0\u1e0f\0\u1e60\0\u1eb1"+
    "\0\u1f02\0\u1f53\0\u1fa4\0\u1ff5\0\u2046\0\u0144\0\u0144\0\u0144"+
    "\0\u2097\0\u20e8\0\u20e8\0\u2139\0\u218a\0\u21db\0\u222c\0\u227d"+
    "\0\u22ce\0\u231f\0\u2370\0\u02d9\0\u0144\0\u23c1\0\u2412\0\u2463"+
    "\0\u24b4\0\u02d9\0\u2505\0\u2556\0\u25a7\0\u02d9\0\u02d9\0\u25f8"+
    "\0\u02d9\0\u2649\0\u02d9\0\u02d9\0\u02d9\0\u269a\0\u26eb\0\u02d9"+
    "\0\u273c\0\u278d\0\u27de\0\u02d9\0\u282f\0\u02d9\0\u02d9\0\u02d9"+
    "\0\u2880\0\u28d1\0\u2922\0\u2973\0\u29c4\0\u2a15\0\u2a66\0\u2ab7"+
    "\0\u2b08\0\u02d9\0\u02d9\0\u02d9\0\u2b59\0\u02d9\0\u2baa\0\u2bfb"+
    "\0\u2c4c\0\u2c9d\0\u0144\0\u2cee\0\u2d3f\0\u2d90\0\u2de1\0\u2e32"+
    "\0\u2e83\0\u2ed4\0\u2f25\0\u0144\0\u02d9\0\u2f76\0\u2fc7\0\u0144"+
    "\0\u3018\0\u3069\0\u30ba\0\u310b\0\u315c\0\u31ad\0\u31fe\0\u324f"+
    "\0\u32a0\0\u02d9\0\u02d9\0\u32f1\0\u3342\0\u02d9\0\u02d9\0\u3393"+
    "\0\u02d9\0\u33e4\0\u3435\0\u02d9\0\u3486\0\u02d9\0\u34d7\0\u3528"+
    "\0\u3579\0\u35ca\0\u02d9\0\u02d9\0\u02d9\0\u361b\0\u366c\0\u36bd"+
    "\0\u370e\0\u375f\0\u37b0\0\u3801\0\u3852\0\u38a3\0\u38f4\0\u3945"+
    "\0\u02d9\0\u02d9\0\u3996\0\u02d9\0\u39e7\0\u02d9\0\u02d9\0\u02d9"+
    "\0\u02d9\0\u3a38\0\u3a89\0\u3ada\0\u02d9\0\u02d9\0\u3b2b\0\u02d9"+
    "\0\u02d9\0\u02d9\0\u02d9\0\u3b7c\0\u3bcd\0\u3c1e\0\u02d9\0\u02d9"+
    "\0\u02d9\0\u02d9\0\u02d9\0\u3c6f\0\u02d9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\5\1\6\1\7\1\5\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\10\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\3\40\1\41"+
    "\1\42\1\5\1\43\1\44\1\40\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\40\1\53\1\40\1\54\1\55"+
    "\2\40\1\56\1\57\1\60\1\61\1\62\1\40\1\63"+
    "\1\40\1\64\1\40\1\65\1\66\1\67\1\70\1\5"+
    "\1\40\2\5\1\40\2\5\10\71\1\72\110\71\46\73"+
    "\4\74\4\73\17\74\1\75\10\74\11\73\2\74\15\5"+
    "\1\76\103\5\123\0\1\6\160\0\1\77\56\0\10\11"+
    "\1\100\42\11\1\101\45\11\7\0\1\102\42\0\1\102"+
    "\46\0\1\40\11\0\1\40\13\0\11\40\7\0\4\40"+
    "\4\0\30\40\4\0\2\40\1\0\3\40\43\0\1\103"+
    "\120\0\1\104\120\0\1\105\120\0\1\106\120\0\1\107"+
    "\1\110\101\0\1\111\114\0\1\112\4\0\1\113\14\0"+
    "\1\114\104\0\11\30\10\0\1\115\6\0\1\30\1\0"+
    "\1\116\2\0\1\115\7\0\1\117\7\0\1\120\43\0"+
    "\11\30\10\0\1\115\6\0\1\30\4\0\1\115\74\0"+
    "\1\121\123\0\1\122\1\123\55\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\5\40\1\124\22\40"+
    "\4\0\2\40\1\0\3\40\43\0\1\125\56\0\1\40"+
    "\11\0\1\40\13\0\11\40\7\0\4\40\4\0\20\40"+
    "\1\126\7\40\4\0\2\40\1\0\3\40\1\0\1\40"+
    "\7\0\1\127\1\0\1\40\2\0\1\130\10\0\11\40"+
    "\7\0\4\40\4\0\15\40\1\131\1\40\1\132\10\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\15\40\1\133\1\40"+
    "\1\134\10\40\4\0\2\40\1\0\3\40\1\0\1\40"+
    "\11\0\1\40\13\0\11\40\7\0\4\40\4\0\26\40"+
    "\1\135\1\40\4\0\2\40\1\0\3\40\1\0\1\40"+
    "\11\0\1\40\13\0\11\40\7\0\4\40\4\0\12\40"+
    "\1\136\1\40\1\137\10\40\1\140\2\40\4\0\2\40"+
    "\1\0\3\40\1\0\1\40\11\0\1\40\13\0\3\40"+
    "\1\141\2\40\1\142\2\40\7\0\4\40\4\0\1\40"+
    "\1\143\12\40\1\144\1\145\12\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\1\40\1\146"+
    "\1\40\1\147\2\40\1\150\1\151\1\40\7\0\4\40"+
    "\4\0\6\40\1\152\4\40\1\153\1\154\3\40\1\155"+
    "\7\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\5\40\1\156"+
    "\7\40\1\157\12\40\4\0\2\40\1\0\3\40\1\0"+
    "\1\40\11\0\1\40\13\0\11\40\7\0\4\40\4\0"+
    "\1\40\1\160\13\40\1\161\4\40\1\162\5\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\22\40\1\163\5\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\7\0\1\164\1\165"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\5\40\1\166"+
    "\22\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\5\40\1\167"+
    "\13\40\1\170\1\171\5\40\4\0\2\40\1\0\3\40"+
    "\1\0\1\40\11\0\1\40\13\0\11\40\7\0\4\40"+
    "\4\0\17\40\1\172\6\40\1\173\1\40\4\0\2\40"+
    "\1\0\3\40\1\0\1\40\11\0\1\40\13\0\1\40"+
    "\1\174\1\40\1\175\2\40\1\176\1\177\1\40\7\0"+
    "\4\40\4\0\14\40\1\200\3\40\1\201\7\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\7\40\1\202\20\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\10\40\1\203\17\40\4\0"+
    "\2\40\1\0\3\40\43\0\1\204\67\0\1\72\135\0"+
    "\11\74\7\0\4\74\4\0\30\74\6\0\5\74\11\0"+
    "\1\205\14\0\11\74\7\0\4\74\4\0\30\74\6\0"+
    "\5\74\2\206\1\0\2\206\1\0\7\206\1\207\10\206"+
    "\11\210\7\206\4\211\1\206\1\212\2\206\17\211\1\213"+
    "\10\211\6\206\3\210\2\211\46\0\4\214\4\0\17\214"+
    "\1\215\10\214\11\0\2\214\121\11\2\102\1\0\2\102"+
    "\1\0\46\102\1\216\44\102\24\0\1\217\15\0\1\220"+
    "\56\0\20\112\1\221\100\112\2\113\4\0\104\113\1\0"+
    "\6\113\21\0\1\222\1\0\1\222\2\0\11\223\17\0"+
    "\1\223\70\0\2\116\17\0\1\115\6\0\1\116\4\0"+
    "\1\115\63\0\7\117\12\0\1\115\6\0\1\117\4\0"+
    "\1\115\63\0\11\120\7\0\1\120\1\224\6\0\5\120"+
    "\1\224\1\120\34\0\1\40\11\0\1\40\13\0\11\40"+
    "\7\0\4\40\4\0\12\40\1\225\15\40\4\0\2\40"+
    "\1\0\3\40\1\0\10\127\1\226\42\127\1\227\45\127"+
    "\2\230\1\0\2\230\1\0\7\230\1\231\10\230\11\232"+
    "\7\230\4\232\1\230\1\233\2\230\30\232\6\230\5\232"+
    "\1\40\11\0\1\40\13\0\11\40\7\0\4\40\4\0"+
    "\25\40\1\234\2\40\4\0\2\40\1\0\3\40\1\0"+
    "\1\40\7\0\1\235\1\236\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\5\40\1\237\22\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\14\40\1\240\13\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\1\40\1\241\26\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\14\40\1\242\13\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\20\40\1\243\7\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\22\40\1\244\5\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\21\40\1\245\6\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\2\40\1\246"+
    "\6\40\7\0\4\40\4\0\30\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\4\40\1\247"+
    "\4\40\7\0\4\40\4\0\30\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\12\40\1\250\15\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\17\40\1\251\10\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\2\40\1\252"+
    "\3\40\1\253\2\40\7\0\4\40\4\0\30\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\2\40\1\254\6\40\7\0\4\40\4\0\30\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\4\40\1\255\4\40\7\0\4\40\4\0\30\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\16\40\1\256\11\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\10\40\1\257\17\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\21\40\1\260\6\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\15\40\1\261\12\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\3\40\1\262\15\40\1\263"+
    "\6\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\4\40\1\264"+
    "\16\40\1\265\4\40\4\0\2\40\1\0\3\40\1\0"+
    "\1\40\11\0\1\40\13\0\11\40\7\0\4\40\4\0"+
    "\21\40\1\266\6\40\4\0\2\40\1\0\3\40\1\0"+
    "\1\40\11\0\1\40\13\0\11\40\7\0\4\40\4\0"+
    "\2\40\1\267\25\40\4\0\2\40\1\0\3\40\11\0"+
    "\1\164\1\165\107\0\1\40\11\0\1\40\13\0\11\40"+
    "\7\0\4\40\4\0\6\40\1\270\12\40\1\271\6\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\12\40\1\272\15\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\1\40\1\273\15\40"+
    "\1\274\10\40\4\0\2\40\1\0\3\40\1\0\1\40"+
    "\11\0\1\40\13\0\11\40\7\0\4\40\4\0\16\40"+
    "\1\275\11\40\4\0\2\40\1\0\3\40\1\0\1\40"+
    "\11\0\1\40\13\0\11\40\7\0\4\40\4\0\1\40"+
    "\1\276\20\40\1\277\5\40\4\0\2\40\1\0\3\40"+
    "\1\0\1\40\11\0\1\40\13\0\11\40\7\0\4\40"+
    "\4\0\16\40\1\300\11\40\4\0\2\40\1\0\3\40"+
    "\1\0\1\40\11\0\1\40\13\0\2\40\1\301\3\40"+
    "\1\302\2\40\7\0\4\40\4\0\30\40\4\0\2\40"+
    "\1\0\3\40\1\0\1\40\11\0\1\40\13\0\2\40"+
    "\1\303\6\40\7\0\4\40\4\0\30\40\4\0\2\40"+
    "\1\0\3\40\1\0\1\40\11\0\1\40\13\0\4\40"+
    "\1\304\4\40\7\0\4\40\4\0\30\40\4\0\2\40"+
    "\1\0\3\40\1\0\1\40\11\0\1\40\13\0\11\40"+
    "\7\0\4\40\4\0\20\40\1\305\7\40\4\0\2\40"+
    "\1\0\3\40\1\0\1\40\11\0\1\40\13\0\11\40"+
    "\7\0\4\40\4\0\5\40\1\306\2\40\1\307\17\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\5\40\1\310\2\40"+
    "\1\311\17\40\4\0\2\40\1\0\3\40\1\0\1\40"+
    "\11\0\1\40\13\0\11\40\7\0\4\40\4\0\5\40"+
    "\1\312\22\40\4\0\2\40\1\0\3\40\47\0\4\74"+
    "\4\0\30\74\11\0\2\74\15\0\1\207\35\0\1\313"+
    "\113\0\4\314\4\0\17\314\1\315\10\314\11\0\2\314"+
    "\15\0\1\207\10\0\11\316\7\0\4\316\1\0\1\313"+
    "\2\0\30\316\6\0\5\316\15\0\1\207\10\0\11\317"+
    "\7\0\4\317\1\0\1\313\2\0\30\317\6\0\5\317"+
    "\2\206\1\0\2\206\1\0\72\206\1\320\2\206\1\321"+
    "\15\206\11\0\1\322\3\0\1\207\10\0\11\317\7\0"+
    "\4\317\1\0\1\313\2\0\30\317\6\0\5\317\26\0"+
    "\11\214\7\0\4\214\4\0\30\214\6\0\5\214\11\0"+
    "\1\323\14\0\11\214\7\0\4\214\4\0\30\214\6\0"+
    "\5\214\20\112\1\221\4\112\1\324\73\112\26\0\11\223"+
    "\17\0\1\223\63\0\1\222\1\0\1\222\2\0\11\120"+
    "\7\0\1\120\1\224\6\0\5\120\1\224\1\120\34\0"+
    "\1\40\11\0\1\40\13\0\11\40\7\0\4\40\4\0"+
    "\6\40\1\325\21\40\4\0\2\40\1\0\3\40\47\0"+
    "\4\326\4\0\17\326\1\327\10\326\11\0\2\326\121\127"+
    "\15\0\1\231\35\0\1\330\113\0\4\331\4\0\17\331"+
    "\1\332\10\331\11\0\2\331\15\0\1\231\10\0\11\333"+
    "\7\0\4\333\1\0\1\330\2\0\30\333\6\0\5\333"+
    "\2\230\1\0\2\230\1\0\72\230\1\334\2\230\1\335"+
    "\15\230\10\0\1\235\1\236\107\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\1\40\1\336\26\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\20\40\1\337\1\340"+
    "\6\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\21\40\1\341"+
    "\6\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\5\40\1\342"+
    "\22\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\13\40\1\343"+
    "\14\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\5\40\1\344"+
    "\22\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\20\40\1\345"+
    "\7\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\7\40\1\346\1\40\7\0\4\40\4\0"+
    "\30\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\12\40\1\347"+
    "\15\40\4\0\2\40\1\0\3\40\1\0\1\40\11\0"+
    "\1\40\13\0\11\40\7\0\4\40\4\0\27\40\1\350"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\16\40\1\351\11\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\17\40\1\352\10\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\3\40\1\353\24\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\5\40\1\354\22\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\22\40\1\355\5\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\6\40\1\356\21\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\21\40\1\357\6\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\22\40\1\360\5\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\5\40\1\361\22\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\10\40\1\362\17\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\5\40\1\363\22\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\5\40\1\364\22\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\7\40\1\365\1\40\7\0\4\40\4\0\30\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\1\40\1\366\26\40"+
    "\4\0\2\40\1\0\3\40\1\0\1\40\11\0\1\40"+
    "\13\0\11\40\7\0\4\40\4\0\27\40\1\367\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\17\40\1\370\10\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\12\40\1\371\15\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\12\40\1\372\15\40\4\0"+
    "\2\40\1\0\3\40\27\0\11\314\7\0\4\314\4\0"+
    "\30\314\6\0\5\314\11\0\1\373\14\0\11\314\7\0"+
    "\4\314\4\0\30\314\6\0\5\314\15\0\1\207\10\0"+
    "\11\316\7\0\4\316\4\0\30\316\6\0\5\316\15\0"+
    "\1\207\10\0\11\317\7\0\4\317\4\0\30\317\6\0"+
    "\5\317\15\0\1\207\35\0\1\313\32\0\1\374\27\0"+
    "\1\207\10\0\11\321\7\0\2\321\3\0\1\313\3\0"+
    "\6\321\102\0\4\375\4\0\30\375\11\0\2\375\46\0"+
    "\4\214\4\0\30\214\11\0\2\214\26\0\11\326\7\0"+
    "\4\326\4\0\30\326\6\0\5\326\11\0\1\376\14\0"+
    "\11\326\7\0\4\326\4\0\30\326\6\0\5\326\26\0"+
    "\11\331\7\0\4\331\4\0\30\331\6\0\5\331\11\0"+
    "\1\377\14\0\11\331\7\0\4\331\4\0\30\331\6\0"+
    "\5\331\15\0\1\231\10\0\11\333\7\0\4\333\4\0"+
    "\30\333\6\0\5\333\15\0\1\231\35\0\1\330\32\0"+
    "\1\u0100\27\0\1\231\10\0\11\335\7\0\2\335\3\0"+
    "\1\330\3\0\6\335\34\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\11\40\1\u0101\16\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\21\40\1\u0102\6\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\10\40\1\u0103\17\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\5\40\1\u0104\22\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\17\40\1\u0105\10\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\5\40\1\u0106\22\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\5\40\1\u0107\22\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\15\40\1\u0108\12\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\7\40\1\u0109\20\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\17\40\1\u010a\10\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\10\40\1\u010b\17\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\3\40\1\u010c\24\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\17\40\1\u010d\10\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\21\40\1\u010e\6\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\6\40\1\u010f\21\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\5\40\1\u0110\22\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\5\40\1\u0111\22\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\5\40\1\u0112\22\40\4\0"+
    "\2\40\1\0\3\40\1\0\1\40\11\0\1\40\13\0"+
    "\11\40\7\0\4\40\4\0\4\40\1\u0113\23\40\4\0"+
    "\2\40\1\0\3\40\47\0\4\314\4\0\30\314\11\0"+
    "\2\314\26\0\11\u0114\7\0\2\u0114\7\0\6\u0114\62\0"+
    "\11\375\7\0\4\375\4\0\30\375\6\0\5\375\46\0"+
    "\4\326\4\0\30\326\11\0\2\326\46\0\4\331\4\0"+
    "\30\331\11\0\2\331\26\0\11\u0115\7\0\2\u0115\7\0"+
    "\6\u0115\34\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\14\40\1\u0116\13\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\14\40\1\u0117\13\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\14\40\1\u0118\13\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\3\40\1\u0119\24\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\21\40\1\u011a\6\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\5\40\1\u011b\22\40\4\0\2\40\1\0"+
    "\3\40\16\0\1\207\10\0\11\u0114\7\0\2\u0114\3\0"+
    "\1\313\2\0\7\u0114\23\0\1\206\25\0\1\231\10\0"+
    "\11\u0115\7\0\2\u0115\3\0\1\330\2\0\7\u0115\23\0"+
    "\1\230\10\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\22\40\1\u011c\5\40\4\0\2\40\1\0"+
    "\3\40\1\0\1\40\11\0\1\40\13\0\11\40\7\0"+
    "\4\40\4\0\5\40\1\u011d\22\40\4\0\2\40\1\0"+
    "\3\40\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\7\1\3\11\2\1\1\11\6\1\2\11"+
    "\1\1\3\11\2\1\2\11\21\1\1\11\1\1\3\11"+
    "\1\1\1\11\3\1\1\11\3\1\6\11\3\1\1\11"+
    "\1\0\3\1\3\11\1\1\1\11\36\1\1\11\17\1"+
    "\1\11\1\0\10\1\3\11\2\0\12\1\1\11\55\1"+
    "\1\11\2\1\1\0\3\1\2\0\1\11\3\1\1\11"+
    "\2\1\1\0\37\1\2\0\1\1\3\0\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  /**
    * '#+' stride demarking start/end of raw string/byte literal
    */
  private int zzShaStride = -1;

  /**
    * Dedicated storage for starting position of some previously successful
    * match
    */
  private int zzPostponedMarkedPos = -1;

  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }

  public final int getRawLiteralStart() {
      return zzPostponedMarkedPos;
  }

  public final int getRawLiteralEnd() {
      return zzStartRead;
  }

  private RustToken imbueRawLiteral() {
      yybegin(YYINITIAL);
      return yycharat(0) == 'b' ? RustToken.RAW_BYTE_STRING_LITERAL : RustToken.RAW_STRING_LITERAL;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RustLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public RustToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_RAW_LITERAL: {
              return imbueRawLiteral();
            }  // fall though
            case 286: break;
            case IN_RAW_LITERAL_SUFFIX: {
              return imbueRawLiteral();
            }  // fall though
            case 287: break;
            case IN_LIFETIME_OR_CHAR: {
              yybegin(YYINITIAL); return RustToken.BAD_CHARACTER;
            }  // fall though
            case 288: break;
            default:
              {
                return RustToken.EOF;
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return RustToken.BAD_CHARACTER;
            }
            // fall through
          case 116: break;
          case 2:
            { return RustToken.WHITESPACE;
            }
            // fall through
          case 117: break;
          case 3:
            { return RustToken.EXCL;
            }
            // fall through
          case 118: break;
          case 4:
            { return RustToken.STRING_LITERAL;
            }
            // fall through
          case 119: break;
          case 5:
            { return RustToken.SHA;
            }
            // fall through
          case 120: break;
          case 6:
            { return RustToken.DOLLAR;
            }
            // fall through
          case 121: break;
          case 7:
            { return RustToken.REM;
            }
            // fall through
          case 122: break;
          case 8:
            { return RustToken.AND;
            }
            // fall through
          case 123: break;
          case 9:
            { yybegin(IN_LIFETIME_OR_CHAR); yypushback(1);
            }
            // fall through
          case 124: break;
          case 10:
            { return RustToken.LPAREN;
            }
            // fall through
          case 125: break;
          case 11:
            { return RustToken.RPAREN;
            }
            // fall through
          case 126: break;
          case 12:
            { return RustToken.MUL;
            }
            // fall through
          case 127: break;
          case 13:
            { return RustToken.PLUS;
            }
            // fall through
          case 128: break;
          case 14:
            { return RustToken.COMMA;
            }
            // fall through
          case 129: break;
          case 15:
            { return RustToken.MINUS;
            }
            // fall through
          case 130: break;
          case 16:
            { return RustToken.DOT;
            }
            // fall through
          case 131: break;
          case 17:
            { return RustToken.DIV;
            }
            // fall through
          case 132: break;
          case 18:
            { return RustToken.NUMBER_LITERAL;
            }
            // fall through
          case 133: break;
          case 19:
            { return RustToken.COLON;
            }
            // fall through
          case 134: break;
          case 20:
            { return RustToken.SEMICOLON;
            }
            // fall through
          case 135: break;
          case 21:
            { return RustToken.LT;
            }
            // fall through
          case 136: break;
          case 22:
            { return RustToken.EQ;
            }
            // fall through
          case 137: break;
          case 23:
            { return RustToken.GT;
            }
            // fall through
          case 138: break;
          case 24:
            { return RustToken.QUEST;
            }
            // fall through
          case 139: break;
          case 25:
            { return RustToken.AT;
            }
            // fall through
          case 140: break;
          case 26:
            { return RustToken.IDENTIFIER;
            }
            // fall through
          case 141: break;
          case 27:
            { return RustToken.LBRACK;
            }
            // fall through
          case 142: break;
          case 28:
            { return RustToken.RBRACK;
            }
            // fall through
          case 143: break;
          case 29:
            { return RustToken.XOR;
            }
            // fall through
          case 144: break;
          case 30:
            { return RustToken.LBRACE;
            }
            // fall through
          case 145: break;
          case 31:
            { return RustToken.OR;
            }
            // fall through
          case 146: break;
          case 32:
            { return RustToken.RBRACE;
            }
            // fall through
          case 147: break;
          case 33:
            { return RustToken.TILDE;
            }
            // fall through
          case 148: break;
          case 34:
            { 
            }
            // fall through
          case 149: break;
          case 35:
            { int shaExcess = yylength() - 1 - zzShaStride;
    if (shaExcess >= 0) {
        yybegin(IN_RAW_LITERAL_SUFFIX);
        yypushback(shaExcess);
    }
            }
            // fall through
          case 150: break;
          case 36:
            { yypushback(1); return imbueRawLiteral();
            }
            // fall through
          case 151: break;
          case 37:
            { return imbueRawLiteral();
            }
            // fall through
          case 152: break;
          case 38:
            { yybegin(YYINITIAL); return RustToken.CHAR_LITERAL;
            }
            // fall through
          case 153: break;
          case 39:
            { return RustToken.EXCLEQ;
            }
            // fall through
          case 154: break;
          case 40:
            { return RustToken.ATTRIBUTE;
            }
            // fall through
          case 155: break;
          case 41:
            { return RustToken.REMEQ;
            }
            // fall through
          case 156: break;
          case 42:
            { return RustToken.ANDEQ;
            }
            // fall through
          case 157: break;
          case 43:
            { return RustToken.MULEQ;
            }
            // fall through
          case 158: break;
          case 44:
            { return RustToken.PLUSEQ;
            }
            // fall through
          case 159: break;
          case 45:
            { return RustToken.MINUSEQ;
            }
            // fall through
          case 160: break;
          case 46:
            { return RustToken.ARROW;
            }
            // fall through
          case 161: break;
          case 47:
            { return RustToken.DOTDOT;
            }
            // fall through
          case 162: break;
          case 48:
            { return RustToken.BLOCK_COMMENT;
            }
            // fall through
          case 163: break;
          case 49:
            { return RustToken.LINE_COMMENT;
            }
            // fall through
          case 164: break;
          case 50:
            { return RustToken.DIVEQ;
            }
            // fall through
          case 165: break;
          case 51:
            { return RustToken.DOUBLE_COLON;
            }
            // fall through
          case 166: break;
          case 52:
            { return RustToken.EQEQ;
            }
            // fall through
          case 167: break;
          case 53:
            { return RustToken.FAT_ARROW;
            }
            // fall through
          case 168: break;
          case 54:
            { return RustToken.XOREQ;
            }
            // fall through
          case 169: break;
          case 55:
            { return RustToken.AS;
            }
            // fall through
          case 170: break;
          case 56:
            { return RustToken.BYTE_STRING_LITERAL;
            }
            // fall through
          case 171: break;
          case 57:
            { return RustToken.BYTE_LITERAL;
            }
            // fall through
          case 172: break;
          case 58:
            { return RustToken.FN;
            }
            // fall through
          case 173: break;
          case 59:
            { return RustToken.I_8;
            }
            // fall through
          case 174: break;
          case 60:
            { return RustToken.IF;
            }
            // fall through
          case 175: break;
          case 61:
            { return RustToken.IN;
            }
            // fall through
          case 176: break;
          case 62:
            { yybegin(IN_RAW_LITERAL);
          zzPostponedMarkedPos = zzStartRead;
          zzShaStride = yylength() - 2;
            }
            // fall through
          case 177: break;
          case 63:
            { return RustToken.U_8;
            }
            // fall through
          case 178: break;
          case 64:
            { return RustToken.OREQ;
            }
            // fall through
          case 179: break;
          case 65:
            { yybegin(YYINITIAL); return RustToken.QUOTE_IDENTIFIER;
            }
            // fall through
          case 180: break;
          case 66:
            { return RustToken.DOTDOTDOT;
            }
            // fall through
          case 181: break;
          case 67:
            { return RustToken.DOTDOTEQ;
            }
            // fall through
          case 182: break;
          case 68:
            { return RustToken.BOX;
            }
            // fall through
          case 183: break;
          case 69:
            { yybegin(IN_RAW_LITERAL);
          zzPostponedMarkedPos = zzStartRead;
          zzShaStride = yylength() - 3;
            }
            // fall through
          case 184: break;
          case 70:
            { return RustToken.DYN;
            }
            // fall through
          case 185: break;
          case 71:
            { return RustToken.F_32;
            }
            // fall through
          case 186: break;
          case 72:
            { return RustToken.F_64;
            }
            // fall through
          case 187: break;
          case 73:
            { return RustToken.FOR;
            }
            // fall through
          case 188: break;
          case 74:
            { return RustToken.I_16;
            }
            // fall through
          case 189: break;
          case 75:
            { return RustToken.I_32;
            }
            // fall through
          case 190: break;
          case 76:
            { return RustToken.I_64;
            }
            // fall through
          case 191: break;
          case 77:
            { return RustToken.LET;
            }
            // fall through
          case 192: break;
          case 78:
            { return RustToken.MOD;
            }
            // fall through
          case 193: break;
          case 79:
            { return RustToken.MUT;
            }
            // fall through
          case 194: break;
          case 80:
            { return RustToken.PUB;
            }
            // fall through
          case 195: break;
          case 81:
            { return RustToken.REF;
            }
            // fall through
          case 196: break;
          case 82:
            { return RustToken.U_16;
            }
            // fall through
          case 197: break;
          case 83:
            { return RustToken.U_32;
            }
            // fall through
          case 198: break;
          case 84:
            { return RustToken.U_64;
            }
            // fall through
          case 199: break;
          case 85:
            { return RustToken.USE;
            }
            // fall through
          case 200: break;
          case 86:
            { return RustToken.CSELF;
            }
            // fall through
          case 201: break;
          case 87:
            { return RustToken.ELSE;
            }
            // fall through
          case 202: break;
          case 88:
            { return RustToken.ENUM;
            }
            // fall through
          case 203: break;
          case 89:
            { return RustToken.I_128;
            }
            // fall through
          case 204: break;
          case 90:
            { return RustToken.IMPL;
            }
            // fall through
          case 205: break;
          case 91:
            { return RustToken.LOOP;
            }
            // fall through
          case 206: break;
          case 92:
            { return RustToken.MOVE;
            }
            // fall through
          case 207: break;
          case 93:
            { return RustToken.SELF;
            }
            // fall through
          case 208: break;
          case 94:
            { return RustToken.TRUE;
            }
            // fall through
          case 209: break;
          case 95:
            { return RustToken.TYPE;
            }
            // fall through
          case 210: break;
          case 96:
            { return RustToken.U_128;
            }
            // fall through
          case 211: break;
          case 97:
            { return RustToken.BREAK;
            }
            // fall through
          case 212: break;
          case 98:
            { return RustToken.CONST;
            }
            // fall through
          case 213: break;
          case 99:
            { return RustToken.CRATE;
            }
            // fall through
          case 214: break;
          case 100:
            { return RustToken.FALSE;
            }
            // fall through
          case 215: break;
          case 101:
            { return RustToken.I_SIZE;
            }
            // fall through
          case 216: break;
          case 102:
            { return RustToken.MACRO;
            }
            // fall through
          case 217: break;
          case 103:
            { return RustToken.MATCH;
            }
            // fall through
          case 218: break;
          case 104:
            { return RustToken.SUPER;
            }
            // fall through
          case 219: break;
          case 105:
            { return RustToken.TRAIT;
            }
            // fall through
          case 220: break;
          case 106:
            { return RustToken.U_SIZE;
            }
            // fall through
          case 221: break;
          case 107:
            { return RustToken.WHERE;
            }
            // fall through
          case 222: break;
          case 108:
            { return RustToken.WHILE;
            }
            // fall through
          case 223: break;
          case 109:
            { return RustToken.YIELD;
            }
            // fall through
          case 224: break;
          case 110:
            { return RustToken.EXTERN;
            }
            // fall through
          case 225: break;
          case 111:
            { return RustToken.RETURN;
            }
            // fall through
          case 226: break;
          case 112:
            { return RustToken.STATIC;
            }
            // fall through
          case 227: break;
          case 113:
            { return RustToken.STRUCT;
            }
            // fall through
          case 228: break;
          case 114:
            { return RustToken.UNSAFE;
            }
            // fall through
          case 229: break;
          case 115:
            { return RustToken.CONTINUE;
            }
            // fall through
          case 230: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
