/*
 * Copyright 2023 Squircle CE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.go.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>go.flex</tt>
 */
public class GoLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\32"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\6\1\44\1\45\1\46\1\47\1\50\1\51\1\11"+
    "\1\52\1\53\1\54\1\11\1\55\1\56\1\57\1\11"+
    "\1\60\1\11\1\61\1\62\1\63\1\64\2\11\1\65"+
    "\2\11\1\66\1\67\1\70\1\71\1\11\1\6\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\11\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\11\1\122\1\123\1\124\1\125\6\0\1\126\32\0"+
    "\2\6\4\11\4\6\1\11\2\6\1\0\7\6\1\11"+
    "\4\6\1\11\5\6\27\11\1\6\37\11\1\6\u01ca\11"+
    "\4\6\14\11\16\6\5\11\7\6\1\11\1\6\1\11"+
    "\21\6\160\0\5\11\1\6\2\11\2\6\4\11\1\6"+
    "\1\11\6\6\1\11\1\6\3\11\1\6\1\11\1\6"+
    "\24\11\1\6\123\11\1\6\213\11\1\6\5\0\2\6"+
    "\246\11\1\6\46\11\2\6\1\11\6\6\51\11\6\6"+
    "\1\11\1\6\55\0\1\6\1\0\1\6\2\0\1\6"+
    "\2\0\1\6\1\0\10\6\33\11\4\6\4\11\15\6"+
    "\6\0\5\6\1\11\4\6\13\0\1\6\1\0\3\6"+
    "\53\11\37\0\4\6\2\11\1\0\143\11\1\6\1\11"+
    "\10\0\1\6\6\0\2\11\2\0\1\6\4\0\2\11"+
    "\12\0\3\11\2\6\1\11\17\6\1\0\1\11\1\0"+
    "\36\11\33\0\2\6\131\11\13\0\1\11\16\6\12\0"+
    "\41\11\11\0\2\11\4\6\1\11\2\6\1\0\30\11"+
    "\4\0\1\11\11\0\1\11\3\0\1\11\5\0\22\6"+
    "\31\11\3\0\4\6\13\11\65\6\25\11\1\6\22\11"+
    "\13\6\61\0\66\11\3\0\1\11\22\0\1\11\7\0"+
    "\12\11\2\0\2\6\12\0\1\6\20\11\3\0\1\6"+
    "\10\11\2\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\1\11\3\6\4\11\2\6\1\0\1\11\7\0\2\6"+
    "\2\0\2\6\3\0\1\11\10\6\1\0\4\6\2\11"+
    "\1\6\3\11\2\0\2\6\12\0\4\11\7\6\2\11"+
    "\1\6\1\0\2\6\3\0\1\6\6\11\4\6\2\11"+
    "\2\6\26\11\1\6\7\11\1\6\2\11\1\6\2\11"+
    "\1\6\2\11\2\6\1\0\1\6\5\0\4\6\2\0"+
    "\2\6\3\0\3\6\1\0\7\6\4\11\1\6\1\11"+
    "\7\6\14\0\3\11\1\0\13\6\3\0\1\6\11\11"+
    "\1\6\3\11\1\6\26\11\1\6\7\11\1\6\2\11"+
    "\1\6\5\11\2\6\1\0\1\11\10\0\1\6\3\0"+
    "\1\6\3\0\2\6\1\11\17\6\2\11\2\0\2\6"+
    "\12\0\1\6\1\11\7\6\1\11\6\0\1\6\3\0"+
    "\1\6\10\11\2\6\2\11\2\6\26\11\1\6\7\11"+
    "\1\6\2\11\1\6\5\11\2\6\1\0\1\11\7\0"+
    "\2\6\2\0\2\6\3\0\7\6\3\0\4\6\2\11"+
    "\1\6\3\11\2\0\2\6\12\0\1\6\1\11\20\6"+
    "\1\0\1\11\1\6\6\11\3\6\3\11\1\6\4\11"+
    "\3\6\2\11\1\6\1\11\1\6\2\11\3\6\2\11"+
    "\3\6\3\11\3\6\14\11\4\6\5\0\3\6\3\0"+
    "\1\6\4\0\2\6\1\11\6\6\1\0\16\6\12\0"+
    "\11\6\1\11\6\6\5\0\10\11\1\6\3\11\1\6"+
    "\27\11\1\6\20\11\3\6\1\11\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\1\6\3\11\5\6\2\11"+
    "\2\0\2\6\12\0\20\6\1\11\3\0\1\6\10\11"+
    "\1\6\3\11\1\6\27\11\1\6\12\11\1\6\5\11"+
    "\2\6\1\0\1\11\7\0\1\6\3\0\1\6\4\0"+
    "\7\6\2\0\7\6\1\11\1\6\2\11\2\0\2\6"+
    "\12\0\1\6\2\11\15\6\4\0\11\11\1\6\3\11"+
    "\1\6\51\11\2\0\1\11\7\0\1\6\3\0\1\6"+
    "\4\0\1\11\5\6\3\11\1\0\7\6\3\11\2\0"+
    "\2\6\12\0\12\6\6\11\1\6\3\0\1\6\22\11"+
    "\3\6\30\11\1\6\11\11\1\6\1\11\2\6\7\11"+
    "\3\6\1\0\4\6\6\0\1\6\1\0\1\6\10\0"+
    "\6\6\12\0\2\6\2\0\15\6\60\11\1\0\2\11"+
    "\7\0\4\6\10\11\10\0\1\6\12\0\47\6\2\11"+
    "\1\6\1\11\1\6\5\11\1\6\30\11\1\6\1\11"+
    "\1\6\12\11\1\0\2\11\11\0\1\11\2\6\5\11"+
    "\1\6\1\11\1\6\6\0\2\6\12\0\2\6\4\11"+
    "\40\6\1\11\27\6\2\0\6\6\12\0\13\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\2\0\10\11\1\6"+
    "\44\11\4\6\24\0\1\6\2\0\5\11\13\0\1\6"+
    "\44\0\11\6\1\0\71\6\53\11\24\0\1\11\12\0"+
    "\6\6\6\11\4\0\4\11\3\0\1\11\3\0\2\11"+
    "\7\0\3\11\4\0\15\11\14\0\1\11\17\0\2\6"+
    "\46\11\1\6\1\11\5\6\1\11\2\6\53\11\1\6"+
    "\115\11\1\6\4\11\2\6\7\11\1\6\1\11\1\6"+
    "\4\11\2\6\51\11\1\6\4\11\2\6\41\11\1\6"+
    "\4\11\2\6\7\11\1\6\1\11\1\6\4\11\2\6"+
    "\17\11\1\6\71\11\1\6\4\11\2\6\103\11\2\6"+
    "\3\0\40\6\20\11\20\6\126\11\2\6\6\11\3\6"+
    "\u016c\11\2\6\21\11\1\6\32\11\5\6\113\11\3\6"+
    "\13\11\7\6\15\11\1\6\4\11\3\0\13\6\22\11"+
    "\3\0\13\6\22\11\2\0\14\6\15\11\1\6\3\11"+
    "\1\6\2\0\14\6\64\11\40\0\3\6\1\11\3\6"+
    "\2\11\1\0\2\6\12\0\41\6\4\0\1\6\12\0"+
    "\6\6\131\11\7\6\5\11\2\0\42\11\1\0\1\11"+
    "\5\6\106\11\12\6\37\11\1\6\14\0\4\6\14\0"+
    "\12\6\12\0\36\11\2\6\5\11\13\6\54\11\4\6"+
    "\32\11\6\6\12\0\46\6\27\11\5\0\4\6\65\11"+
    "\12\0\1\6\35\0\2\6\13\0\6\6\12\0\15\6"+
    "\1\11\10\6\16\0\1\6\2\0\77\6\5\0\57\11"+
    "\21\0\7\11\4\6\12\0\21\6\11\0\14\6\3\0"+
    "\36\11\15\0\2\11\12\0\54\11\16\0\14\6\44\11"+
    "\24\0\10\6\12\0\3\6\3\11\12\0\44\11\2\6"+
    "\11\11\7\6\53\11\2\6\3\11\20\6\3\0\1\6"+
    "\25\0\4\11\1\0\6\11\1\0\2\11\3\0\1\11"+
    "\5\6\300\11\72\0\1\6\5\0\26\11\2\6\6\11"+
    "\2\6\46\11\2\6\6\11\2\6\10\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\37\11\2\6\65\11"+
    "\1\6\7\11\1\6\1\11\3\6\3\11\1\6\7\11"+
    "\3\6\4\11\2\6\6\11\4\6\15\11\5\6\3\11"+
    "\1\6\7\11\16\6\5\0\30\6\2\3\5\0\20\6"+
    "\2\11\23\6\1\11\13\6\5\0\1\6\12\0\1\6"+
    "\1\11\15\6\1\11\20\6\15\11\3\6\40\11\20\6"+
    "\15\0\4\6\1\0\3\6\14\0\21\6\1\11\4\6"+
    "\1\11\2\6\12\11\1\6\1\11\3\6\5\11\6\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\4\11\1\6"+
    "\13\11\2\6\4\11\5\6\5\11\4\6\1\11\21\6"+
    "\51\11\u0177\6\57\11\1\6\57\11\1\6\205\11\6\6"+
    "\4\11\3\0\2\11\14\6\46\11\1\6\1\11\5\6"+
    "\1\11\2\6\70\11\7\6\1\11\17\6\1\0\27\11"+
    "\11\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\40\0\57\6\1\11\325\6\3\11\31\6\11\11"+
    "\6\0\1\6\5\11\2\6\5\11\4\6\126\11\2\6"+
    "\2\0\2\6\3\11\1\6\132\11\1\6\4\11\5\6"+
    "\53\11\1\6\136\11\21\6\40\11\60\6\320\11\100\6"+
    "\375\11\3\6\215\11\103\6\56\11\2\6\15\11\3\6"+
    "\20\11\12\0\2\11\24\6\57\11\1\0\4\6\12\0"+
    "\1\6\37\11\2\0\120\11\2\0\45\6\11\11\2\6"+
    "\147\11\2\6\65\11\2\6\11\11\52\6\15\11\1\0"+
    "\3\11\1\0\4\11\1\0\27\11\5\0\4\6\1\0"+
    "\13\6\1\11\7\6\64\11\14\6\2\0\62\11\22\0"+
    "\12\6\12\0\6\6\22\0\6\11\3\6\1\11\1\6"+
    "\2\11\13\0\34\11\10\0\2\6\27\11\15\0\14\6"+
    "\35\11\3\6\4\0\57\11\16\0\16\6\1\11\12\0"+
    "\6\6\5\11\1\0\12\11\12\0\5\11\1\6\51\11"+
    "\16\0\11\6\3\11\1\0\10\11\2\0\2\6\12\0"+
    "\6\6\27\11\3\6\1\11\3\0\62\11\1\0\1\11"+
    "\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11"+
    "\30\6\3\11\2\6\13\11\5\0\2\6\3\11\2\0"+
    "\12\6\6\11\2\6\6\11\2\6\6\11\11\6\7\11"+
    "\1\6\7\11\1\6\53\11\1\6\16\11\6\6\163\11"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\11\14\6"+
    "\27\11\4\6\61\11\4\6\u0100\3\156\11\2\6\152\11"+
    "\46\6\7\11\14\6\5\11\5\6\1\11\1\0\12\11"+
    "\1\6\15\11\1\6\5\11\1\6\1\11\1\6\2\11"+
    "\1\6\2\11\1\6\154\11\41\6\153\11\22\6\100\11"+
    "\2\6\66\11\50\6\15\11\3\6\20\0\20\6\20\0"+
    "\3\6\2\11\30\6\3\11\31\6\1\11\6\6\5\11"+
    "\1\6\207\11\2\6\1\0\4\6\1\11\13\6\12\0"+
    "\7\6\32\11\4\6\1\11\1\6\32\11\13\6\131\11"+
    "\3\6\6\11\2\6\6\11\2\6\6\11\2\6\3\11"+
    "\3\6\2\11\3\6\2\11\22\6\3\0\4\6\14\11"+
    "\1\6\32\11\1\6\23\11\1\6\2\11\1\6\17\11"+
    "\2\6\16\11\42\6\173\11\105\6\65\11\210\6\1\0"+
    "\202\6\35\11\3\6\61\11\17\6\1\0\37\6\40\11"+
    "\15\6\36\11\5\6\46\11\5\0\5\6\36\11\2\6"+
    "\44\11\4\6\10\11\1\6\5\11\52\6\236\11\2\6"+
    "\12\0\6\6\44\11\4\6\44\11\4\6\50\11\10\6"+
    "\64\11\234\6\67\11\11\6\26\11\12\6\10\11\230\6"+
    "\6\11\2\6\1\11\1\6\54\11\1\6\2\11\3\6"+
    "\1\11\2\6\27\11\12\6\27\11\11\6\37\11\101\6"+
    "\23\11\1\6\2\11\12\6\26\11\12\6\32\11\106\6"+
    "\70\11\6\6\2\11\100\6\1\11\3\0\1\6\2\0"+
    "\5\6\4\0\4\11\1\6\3\11\1\6\35\11\2\6"+
    "\3\0\4\6\1\0\40\6\35\11\3\6\35\11\43\6"+
    "\10\11\1\6\34\11\2\0\31\6\66\11\12\6\26\11"+
    "\12\6\23\11\15\6\22\11\156\6\111\11\67\6\63\11"+
    "\15\6\63\11\15\6\44\11\4\0\10\6\12\0\u0146\6"+
    "\52\11\1\6\2\0\3\6\2\11\116\6\35\11\12\6"+
    "\1\11\10\6\26\11\13\0\137\6\25\11\33\6\27\11"+
    "\11\6\3\0\65\11\17\0\37\6\12\0\17\6\4\0"+
    "\55\11\13\0\2\6\1\0\17\6\1\0\2\6\31\11"+
    "\7\6\12\0\6\6\3\0\44\11\16\0\1\6\12\0"+
    "\4\6\1\11\2\0\1\11\10\6\43\11\1\0\2\6"+
    "\1\11\11\6\3\0\60\11\16\0\4\11\4\6\4\0"+
    "\1\6\14\0\1\11\1\6\1\11\43\6\22\11\1\6"+
    "\31\11\14\0\6\6\1\0\101\6\7\11\1\6\1\11"+
    "\1\6\4\11\1\6\17\11\1\6\12\11\7\6\57\11"+
    "\14\0\5\6\12\0\6\6\4\0\1\6\10\11\2\6"+
    "\2\11\2\6\26\11\1\6\7\11\1\6\2\11\1\6"+
    "\5\11\1\6\2\0\1\11\7\0\2\6\2\0\2\6"+
    "\3\0\2\6\1\11\6\6\1\0\5\6\5\11\2\0"+
    "\2\6\7\0\3\6\5\0\213\6\65\11\22\0\4\11"+
    "\5\6\12\0\4\6\1\0\3\11\36\6\60\11\24\0"+
    "\2\11\1\6\1\11\10\6\12\0\246\6\57\11\7\0"+
    "\2\6\11\0\27\6\4\11\2\0\42\6\60\11\21\0"+
    "\3\6\1\11\13\6\12\0\46\6\53\11\15\0\1\11"+
    "\7\6\12\0\66\6\33\11\2\6\17\0\4\6\12\0"+
    "\306\6\54\11\17\0\145\6\100\11\12\0\25\6\10\11"+
    "\2\6\1\11\2\6\10\11\1\6\2\11\1\6\30\11"+
    "\6\0\1\6\2\0\2\6\4\0\1\11\1\0\1\11"+
    "\2\0\14\6\12\0\106\6\10\11\2\6\47\11\7\0"+
    "\2\6\7\0\1\11\1\6\1\11\1\0\33\6\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\6\1\0\10\6"+
    "\1\11\13\0\56\11\20\0\3\6\1\11\42\6\71\11"+
    "\7\6\11\11\1\6\45\11\10\0\1\6\10\0\1\11"+
    "\17\6\12\0\30\6\36\11\2\6\26\0\1\6\16\0"+
    "\111\6\7\11\1\6\2\11\1\6\46\11\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\11\1\0\10\6"+
    "\12\0\6\6\6\11\1\6\2\11\1\6\40\11\5\0"+
    "\1\6\2\0\1\6\5\0\1\11\7\6\12\0\u0136\6"+
    "\23\11\4\0\271\6\1\11\54\6\4\11\37\6\232\11"+
    "\146\6\157\11\21\6\304\11\274\6\57\11\1\6\11\0"+
    "\307\6\107\11\271\6\71\11\7\6\37\11\1\6\12\0"+
    "\146\6\36\11\2\6\5\0\13\6\60\11\7\0\11\6"+
    "\4\11\14\6\12\0\11\6\25\11\5\6\23\11\260\6"+
    "\100\11\200\6\113\11\4\6\1\0\1\11\67\0\7\6"+
    "\4\0\15\11\100\6\2\11\1\6\1\11\1\0\13\6"+
    "\2\0\16\6\370\11\10\6\326\11\52\6\11\11\367\6"+
    "\37\11\61\6\3\11\21\6\4\11\10\6\u018c\11\4\6"+
    "\153\11\5\6\15\11\3\6\11\11\7\6\12\11\3\6"+
    "\2\0\1\6\4\0\301\6\5\0\3\6\26\0\2\6"+
    "\7\0\36\6\4\0\224\6\3\0\273\6\125\11\1\6"+
    "\107\11\1\6\2\11\2\6\1\11\2\6\2\11\2\6"+
    "\4\11\1\6\14\11\1\6\1\11\1\6\7\11\1\6"+
    "\101\11\1\6\4\11\2\6\10\11\1\6\7\11\1\6"+
    "\34\11\1\6\4\11\1\6\5\11\1\6\1\11\3\6"+
    "\7\11\1\6\u0154\11\2\6\31\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\10\11\2\6\151\0\4\6\62\0\10\6\1\0\16\6"+
    "\1\0\26\6\5\0\1\6\17\0\120\6\7\0\1\6"+
    "\21\0\2\6\7\0\1\6\2\0\1\6\5\0\325\6"+
    "\55\11\3\6\7\0\7\11\2\6\12\0\4\6\1\11"+
    "\u0171\6\54\11\16\0\5\6\306\11\13\6\7\0\51\6"+
    "\104\11\7\0\1\11\4\6\12\0\u0156\6\1\11\117\6"+
    "\4\11\1\6\33\11\1\6\2\11\1\6\1\11\2\6"+
    "\1\11\1\6\12\11\1\6\4\11\1\6\1\11\1\6"+
    "\1\11\6\6\1\11\4\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\3\11\1\6\2\11\1\6\1\11\2\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\2\11\1\6\1\11\2\6\4\11\1\6"+
    "\7\11\1\6\4\11\1\6\4\11\1\6\1\11\1\6"+
    "\12\11\1\6\21\11\5\6\3\11\1\6\5\11\1\6"+
    "\21\11\u0134\6\12\0\6\6\336\11\42\6\65\11\13\6"+
    "\336\11\2\6\u0182\11\16\6\u0131\11\37\6\36\11\342\6"+
    "\113\11\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\13\5\1\30\1\31\1\32\21\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\4\1\0\1\40\1\41\1\42\1\43"+
    "\1\10\1\0\1\44\1\45\1\46\1\47\1\50\1\0"+
    "\1\51\1\52\1\53\1\54\1\21\2\0\1\51\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\0\15\5"+
    "\1\64\16\5\1\65\1\66\22\5\1\67\1\70\2\4"+
    "\1\71\2\10\1\72\2\0\1\73\1\74\1\75\1\76"+
    "\11\5\1\77\13\5\1\100\13\5\1\101\4\5\1\102"+
    "\1\103\1\5\1\104\1\105\16\5\1\106\1\0\1\51"+
    "\1\52\10\5\1\107\10\5\1\110\1\5\1\111\1\5"+
    "\1\112\1\113\1\114\4\5\1\115\3\5\1\116\3\5"+
    "\1\117\1\120\1\121\4\5\1\122\1\5\1\123\4\5"+
    "\1\124\2\5\1\125\4\5\1\126\1\127\1\130\2\5"+
    "\1\131\4\5\1\132\3\5\1\133\1\134\11\5\1\135"+
    "\1\136\1\5\1\137\2\5\1\140\2\5\1\141\2\5"+
    "\1\142\1\143\1\144\2\5\1\145\1\146\1\147\11\5"+
    "\1\150\4\5\1\151\7\5\1\152\2\5\1\153\12\5"+
    "\1\154\3\5\1\155\3\5\1\156\4\5\1\157\1\160"+
    "\1\161\1\162\1\163\1\164\1\165\1\166\1\5\1\167"+
    "\12\5\1\170\1\5\1\171\1\172\1\173\7\5\1\174"+
    "\1\5\1\175\1\5\1\176\1\177\1\5\1\200\1\201"+
    "\1\202\1\203\1\204\4\5\1\205\11\5\1\206\1\207"+
    "\6\5\1\210\6\5\1\211\1\212\1\213\1\214\1\215"+
    "\1\216\7\5\1\217\1\220\2\5\1\221\1\5\1\222"+
    "\2\5\1\223\1\224\3\5\1\225\1\226\4\5\1\227"+
    "\1\5\1\230\1\231\1\5\1\232\4\5\1\233\5\5"+
    "\1\234\1\235\1\236\5\5\1\237\1\5\1\240\1\241"+
    "\3\5\1\242\1\243\1\244\1\5\1\245";

  private static int [] zzUnpackAction() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\127\0\256\0\u0105\0\u015c\0\u01b3\0\u020a"+
    "\0\u0261\0\u02b8\0\127\0\127\0\u030f\0\u0366\0\127\0\u03bd"+
    "\0\u0414\0\u046b\0\u04c2\0\u0519\0\u0570\0\127\0\u05c7\0\u061e"+
    "\0\u0675\0\u06cc\0\u0723\0\u077a\0\u07d1\0\u0828\0\u087f\0\u08d6"+
    "\0\u092d\0\u0984\0\u09db\0\u0a32\0\u0a89\0\127\0\127\0\u0ae0"+
    "\0\u0b37\0\u0b8e\0\u0be5\0\u0c3c\0\u0c93\0\u0cea\0\u0d41\0\u0d98"+
    "\0\u0def\0\u0e46\0\u0e9d\0\u0ef4\0\u0f4b\0\u0fa2\0\u0ff9\0\u1050"+
    "\0\u10a7\0\127\0\u10fe\0\127\0\127\0\127\0\127\0\u1155"+
    "\0\127\0\127\0\127\0\u11ac\0\127\0\u1203\0\127\0\127"+
    "\0\127\0\127\0\127\0\u125a\0\u12b1\0\u1308\0\u135f\0\127"+
    "\0\u13b6\0\u140d\0\u1464\0\127\0\127\0\127\0\u14bb\0\127"+
    "\0\127\0\127\0\u1512\0\u1569\0\u15c0\0\u1617\0\u166e\0\u16c5"+
    "\0\u171c\0\u1773\0\u17ca\0\u1821\0\u1878\0\u18cf\0\u1926\0\u197d"+
    "\0\u19d4\0\127\0\u1a2b\0\u1a82\0\u1ad9\0\u1b30\0\u1b87\0\u1bde"+
    "\0\u1c35\0\u1c8c\0\u1ce3\0\u1d3a\0\u1d91\0\u1de8\0\u1e3f\0\u1e96"+
    "\0\u1eed\0\u01b3\0\u1f44\0\u1f9b\0\u1ff2\0\u2049\0\u20a0\0\u20f7"+
    "\0\u214e\0\u21a5\0\u21fc\0\u2253\0\u22aa\0\u2301\0\u2358\0\u23af"+
    "\0\u2406\0\u245d\0\u24b4\0\u250b\0\127\0\127\0\u2562\0\u25b9"+
    "\0\127\0\u2610\0\u2667\0\127\0\u26be\0\u2715\0\u1464\0\127"+
    "\0\127\0\127\0\u276c\0\u27c3\0\u281a\0\u2871\0\u28c8\0\u291f"+
    "\0\u2976\0\u29cd\0\u2a24\0\u01b3\0\u2a7b\0\u2ad2\0\u2b29\0\u2b80"+
    "\0\u2bd7\0\u2c2e\0\u2c85\0\u2cdc\0\u2d33\0\u2d8a\0\u2de1\0\u01b3"+
    "\0\u2e38\0\u2e8f\0\u2ee6\0\u2f3d\0\u2f94\0\u2feb\0\u3042\0\u3099"+
    "\0\u30f0\0\u3147\0\u319e\0\u01b3\0\u31f5\0\u324c\0\u32a3\0\u32fa"+
    "\0\u3351\0\u01b3\0\u33a8\0\u01b3\0\u01b3\0\u33ff\0\u3456\0\u34ad"+
    "\0\u3504\0\u355b\0\u35b2\0\u3609\0\u3660\0\u36b7\0\u370e\0\u3765"+
    "\0\u37bc\0\u3813\0\u386a\0\u01b3\0\u38c1\0\u3918\0\127\0\u396f"+
    "\0\u39c6\0\u3a1d\0\u3a74\0\u3acb\0\u3b22\0\u3b79\0\u3bd0\0\u01b3"+
    "\0\u3c27\0\u3c7e\0\u3cd5\0\u3d2c\0\u3d83\0\u3dda\0\u3e31\0\u3e88"+
    "\0\u3edf\0\u3f36\0\u01b3\0\u3f8d\0\u01b3\0\u01b3\0\u01b3\0\u3fe4"+
    "\0\u403b\0\u4092\0\u40e9\0\u01b3\0\u4140\0\u4197\0\u41ee\0\u01b3"+
    "\0\u4245\0\u429c\0\u42f3\0\u01b3\0\u01b3\0\u01b3\0\u434a\0\u43a1"+
    "\0\u43f8\0\u444f\0\u01b3\0\u44a6\0\u01b3\0\u44fd\0\u4554\0\u45ab"+
    "\0\u4602\0\u01b3\0\u4659\0\u46b0\0\u01b3\0\u4707\0\u475e\0\u47b5"+
    "\0\u480c\0\u01b3\0\u01b3\0\u4863\0\u48ba\0\u4911\0\u01b3\0\u4968"+
    "\0\u49bf\0\u4a16\0\u4a6d\0\u4ac4\0\u4b1b\0\u4b72\0\u4bc9\0\u4c20"+
    "\0\u01b3\0\u4c77\0\u4cce\0\u4d25\0\u4d7c\0\u4dd3\0\u4e2a\0\u4e81"+
    "\0\u4ed8\0\u4f2f\0\u01b3\0\u01b3\0\u4f86\0\u01b3\0\u4fdd\0\u5034"+
    "\0\u01b3\0\u508b\0\u50e2\0\u01b3\0\u5139\0\u5190\0\u01b3\0\u01b3"+
    "\0\u01b3\0\u51e7\0\u523e\0\u01b3\0\u5295\0\u01b3\0\u52ec\0\u5343"+
    "\0\u539a\0\u53f1\0\u5448\0\u549f\0\u54f6\0\u554d\0\u55a4\0\u01b3"+
    "\0\u55fb\0\u5652\0\u56a9\0\u5700\0\u5757\0\u57ae\0\u5805\0\u585c"+
    "\0\u58b3\0\u590a\0\u5961\0\u59b8\0\u01b3\0\u5a0f\0\u5a66\0\u01b3"+
    "\0\u5abd\0\u5b14\0\u5b6b\0\u5bc2\0\u5c19\0\u5c70\0\u5cc7\0\u5d1e"+
    "\0\u5d75\0\u5dcc\0\u01b3\0\u5e23\0\u5e7a\0\u5ed1\0\u01b3\0\u5f28"+
    "\0\u5f7f\0\u5fd6\0\u01b3\0\u602d\0\u6084\0\u60db\0\u6132\0\u01b3"+
    "\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u6189"+
    "\0\u01b3\0\u61e0\0\u6237\0\u628e\0\u62e5\0\u633c\0\u6393\0\u63ea"+
    "\0\u6441\0\u6498\0\u64ef\0\u6546\0\u659d\0\u65f4\0\u664b\0\u01b3"+
    "\0\u66a2\0\u66f9\0\u6750\0\u67a7\0\u67fe\0\u6855\0\u68ac\0\u6903"+
    "\0\u695a\0\u01b3\0\u69b1\0\u01b3\0\u01b3\0\u6a08\0\u01b3\0\u01b3"+
    "\0\u01b3\0\u01b3\0\u6a5f\0\u6ab6\0\u6b0d\0\u6b64\0\u6bbb\0\u01b3"+
    "\0\u6c12\0\u6c69\0\u6cc0\0\u6d17\0\u6d6e\0\u6dc5\0\u6e1c\0\u6e73"+
    "\0\u6eca\0\u01b3\0\u6f21\0\u6f78\0\u6fcf\0\u7026\0\u707d\0\u70d4"+
    "\0\u712b\0\u01b3\0\u7182\0\u71d9\0\u7230\0\u7287\0\u72de\0\u7335"+
    "\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u01b3\0\u738c\0\u73e3\0\u743a"+
    "\0\u7491\0\u74e8\0\u753f\0\u7596\0\u75ed\0\u7644\0\u01b3\0\u769b"+
    "\0\u76f2\0\u01b3\0\u7749\0\u01b3\0\u77a0\0\u77f7\0\u01b3\0\u01b3"+
    "\0\u784e\0\u78a5\0\u78fc\0\u01b3\0\u7953\0\u79aa\0\u7a01\0\u7a58"+
    "\0\u7aaf\0\u01b3\0\u7b06\0\u01b3\0\u01b3\0\u7b5d\0\u01b3\0\u7bb4"+
    "\0\u7c0b\0\u7c62\0\u7cb9\0\u01b3\0\u7d10\0\u7d67\0\u7dbe\0\u7e15"+
    "\0\u7e6c\0\u01b3\0\u01b3\0\u01b3\0\u7ec3\0\u7f1a\0\u7f71\0\u7fc8"+
    "\0\u801f\0\u01b3\0\u8076\0\u01b3\0\u01b3\0\u80cd\0\u8124\0\u817b"+
    "\0\u01b3\0\u01b3\0\u01b3\0\u81d2\0\u01b3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\10\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\2\7\1\33\1\7\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\2\7\1\43"+
    "\1\44\1\45\2\7\1\46\1\2\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\7\1\60"+
    "\1\7\1\61\1\62\1\63\1\7\1\64\1\7\1\65"+
    "\1\66\1\67\1\70\1\71\3\7\1\72\1\73\1\74"+
    "\1\75\1\2\131\0\1\3\165\0\1\76\65\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\77\56\6\1\100\37\6"+
    "\1\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\30\7\4\0\1\7\41\0\1\101\100\0\1\102\25\0"+
    "\1\103\27\0\1\104\35\0\2\12\1\0\2\12\1\0"+
    "\6\12\1\105\52\12\1\106\37\12\41\0\1\107\105\0"+
    "\1\110\20\0\1\111\107\0\1\112\16\0\1\113\110\0"+
    "\1\114\1\0\11\115\110\0\1\116\4\0\1\117\14\0"+
    "\1\120\110\0\1\115\1\0\7\121\2\122\27\0\1\123"+
    "\14\0\1\124\15\0\1\123\31\0\1\115\1\0\11\24"+
    "\44\0\1\124\65\0\1\125\107\0\1\126\15\0\1\127"+
    "\1\130\126\0\1\131\126\0\1\132\1\133\127\0\1\134"+
    "\63\0\1\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\15\7\1\135\12\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\17\7\1\136\10\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\10\7\1\137\17\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\1\140\27\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\14\7\1\141\13\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\15\7\1\142\12\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\1\143\27\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\1\144\27\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\145"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\16\7\1\146\11\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\10\7\1\147"+
    "\4\7\1\150\2\7\1\151\7\7\4\0\1\7\41\0"+
    "\1\152\65\0\1\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\16\7\1\153\11\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\15\7\1\154"+
    "\2\7\1\155\6\7\1\156\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\1\157\6\7\1\160"+
    "\2\7\1\161\2\7\1\162\12\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\163"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\12\7\1\164\15\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\1\165\11\7"+
    "\1\166\2\7\1\167\5\7\1\170\4\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\15\7"+
    "\1\171\12\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\5\7\1\172\5\7\1\173\1\174"+
    "\13\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\4\7\1\175\23\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\1\176\27\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\4\7\1\177\3\7\1\200\17\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\1\201"+
    "\17\7\1\202\7\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\1\203\3\7\1\204\16\7"+
    "\1\205\4\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\4\7\1\206\15\7\1\207\2\7"+
    "\1\210\2\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\20\7\1\211\6\7\1\212\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\10\7\1\213\17\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\1\214\27\7\4\0\1\7"+
    "\41\0\1\215\61\0\1\216\3\0\1\6\1\217\2\6"+
    "\1\217\1\220\121\6\41\0\1\221\65\0\1\12\1\222"+
    "\2\12\1\222\1\223\121\12\23\0\1\224\130\0\11\115"+
    "\12\0\1\225\25\0\1\225\3\0\1\124\24\0\17\116"+
    "\1\226\107\116\2\117\4\0\120\117\24\0\1\115\1\0"+
    "\7\121\2\122\44\0\1\124\47\0\1\115\1\0\11\122"+
    "\44\0\1\124\51\0\11\227\6\0\6\227\20\0\6\227"+
    "\70\0\1\230\126\0\1\231\74\0\1\232\4\0\3\232"+
    "\3\0\1\232\1\0\1\232\13\0\3\232\64\0\1\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\13\7"+
    "\1\233\1\234\6\7\1\235\4\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\23\7\1\236"+
    "\4\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\4\7\1\237\23\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\21\7\1\240"+
    "\6\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\3\7\1\241\24\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\10\7\1\242"+
    "\17\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\21\7\1\243\6\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\16\7\1\244"+
    "\11\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\16\7\1\245\11\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\12\7\1\246"+
    "\15\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\22\7\1\247\5\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\11\7\1\250\5\7\1\251"+
    "\1\252\1\7\4\0\30\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\10\7\1\253\17\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\16\7\1\254\11\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\15\7\1\255\12\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\4\7\1\256\23\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\22\7\1\257\5\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\16\7\1\260\2\7\1\261\6\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\1\262"+
    "\27\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\15\7\1\263\12\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\13\7\1\264"+
    "\1\265\1\7\1\266\11\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\5\7\1\267\4\7"+
    "\1\270\15\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\21\7\1\271\6\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\12\7"+
    "\1\272\15\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\15\7\1\273\12\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\20\7"+
    "\1\274\7\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\14\7\1\275\13\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\22\7"+
    "\1\276\5\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\1\277\15\7\1\300\11\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\22\7\1\301\5\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\14\7\1\302\13\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\11\7\1\303\4\7\1\244\11\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\25\7\1\304"+
    "\2\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\12\7\1\305\15\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\2\7\1\306"+
    "\11\7\1\307\13\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\10\7\1\310\17\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\14\7\1\311\13\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\1\312\1\7\1\313\17\7"+
    "\1\314\5\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\14\7\1\315\13\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\12\7"+
    "\1\316\15\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\20\7\1\317\7\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\10\7"+
    "\1\320\17\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\23\7\1\321\4\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\16\7"+
    "\1\322\11\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\14\7\1\323\13\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\20\7"+
    "\1\324\7\7\4\0\1\7\1\6\1\217\2\6\1\217"+
    "\1\220\2\6\1\77\56\6\1\100\44\6\1\0\2\6"+
    "\1\77\56\6\1\100\37\6\1\12\1\222\2\12\1\222"+
    "\1\223\6\12\1\105\52\12\1\106\44\12\1\0\6\12"+
    "\1\105\52\12\1\106\37\12\20\0\1\325\1\0\1\325"+
    "\2\0\11\326\71\0\17\116\1\226\4\116\1\327\102\116"+
    "\1\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\16\7\1\330\11\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\22\7\1\331\5\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\14\7\1\332\13\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\1\333\27\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\12\7"+
    "\1\334\15\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\14\7\1\335\1\7\1\336\3\7\4\0\30\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\4\7\1\337\23\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\14\7\1\340\13\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\22\7\1\341\5\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\4\7\1\342\5\7"+
    "\1\343\15\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\10\7\1\344\17\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\12\7"+
    "\1\345\15\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\15\7\1\346\12\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\10\7"+
    "\1\347\17\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\16\7\1\350\11\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\13\7"+
    "\1\351\14\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\4\7\1\352\23\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\12\7"+
    "\1\353\15\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\1\354\27\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\355"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\4\7\1\356\23\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\14\7\1\357"+
    "\13\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\21\7\1\360\6\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\16\7\1\361"+
    "\11\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\21\7\1\362\1\363\5\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\27\7"+
    "\1\364\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\1\365\3\7\1\366\23\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\4\7"+
    "\1\367\23\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\4\7\1\370\23\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\12\7"+
    "\1\371\6\7\1\372\6\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\1\373\27\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\2\7\1\374\25\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\15\7\1\375\12\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\6\7\1\376\21\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\15\7\1\377\12\7\4\0"+
    "\2\7\10\0\1\7\13\0\1\7\1\u0100\1\7\1\u0101"+
    "\2\7\1\u0102\1\u0103\1\7\6\0\22\7\4\0\4\7"+
    "\1\u0104\23\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\4\7\1\u0105\23\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\11\7"+
    "\1\u0106\16\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\10\7\1\u0107\17\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\14\7"+
    "\1\u0108\13\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\6\7\1\u0109\21\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\12\7"+
    "\1\u010a\15\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\15\7\1\u010b\12\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\23\7"+
    "\1\u010c\4\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\4\7\1\u010d\23\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\4\7"+
    "\1\u010e\23\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\10\7\1\u010f\12\7\1\u0110\4\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\22\7\1\u0111\5\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\4\7\1\u0112\23\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\4\7\1\u0113\23\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\22\7\1\u0114\5\7"+
    "\4\0\1\7\25\0\11\326\116\0\11\326\44\0\1\124"+
    "\24\0\1\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\1\u0115\27\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\1\u0116\27\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\22\7"+
    "\1\u0117\5\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\12\7\1\u0118\15\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\3\7"+
    "\1\u0119\24\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\20\7\1\u011a\7\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\23\7"+
    "\1\u011b\4\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\26\7\1\u011c\1\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\7\7\1\u011d\12\7"+
    "\4\0\30\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\1\u011e\27\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\1\u011f\27\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\22\7\1\u0120\5\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\4\7\1\u0121\23\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\25\7\1\u0122\2\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\22\7\1\u0123\5\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\16\7\1\u0124\11\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\5\7\1\u0125\3\7\1\u0126\2\7"+
    "\1\u0127\1\u0128\1\u0129\3\7\4\0\30\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\14\7"+
    "\1\u012a\13\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\11\7\1\u012b\16\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\4\7"+
    "\1\u012c\23\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\12\7\1\u012d\15\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\22\7"+
    "\1\u012e\5\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\10\7\1\u012f\17\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\23\7"+
    "\1\u0130\4\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\20\7\1\u0131\7\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\22\7"+
    "\1\u0132\5\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\22\7\1\u0133\5\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\4\7"+
    "\1\u0134\23\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\22\7\1\u0135\5\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\20\7"+
    "\1\u0136\7\7\4\0\2\7\10\0\1\7\13\0\6\7"+
    "\1\u0137\2\7\6\0\22\7\4\0\30\7\4\0\2\7"+
    "\10\0\1\7\13\0\2\7\1\u0138\6\7\6\0\22\7"+
    "\4\0\30\7\4\0\2\7\10\0\1\7\13\0\4\7"+
    "\1\u0139\4\7\6\0\22\7\4\0\30\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\20\7"+
    "\1\u013a\7\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\1\u013b\27\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\2\7\1\u013c"+
    "\25\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\22\7\1\u013d\5\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\u013e"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\24\7\1\u013f\3\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\20\7\1\u0140"+
    "\7\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\2\7\1\u0141\25\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\14\7\1\u0142"+
    "\13\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\2\7\1\u0143\25\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\2\7\1\u0144"+
    "\25\7\4\0\2\7\10\0\1\7\13\0\1\7\1\u0145"+
    "\1\7\1\u0146\2\7\1\u0147\1\u0148\1\7\6\0\22\7"+
    "\4\0\16\7\1\u0149\11\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\20\7\1\u014a\7\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\10\7\1\u014b\17\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\21\7\1\u014c\6\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\21\7\1\u014d\6\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\4\7\1\u014e\23\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\5\7\1\u014f\22\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\1\u0150\1\u0151\3\7\1\u0152\7\7"+
    "\1\u0153\4\7\4\0\30\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\14\7\1\u0154\13\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\22\7\1\u0155\5\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\2\7\1\u0156\25\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\1\u0157"+
    "\12\7\1\u0158\6\7\4\0\30\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\u0159"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\12\7\1\u015a\15\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\u015b"+
    "\14\7\1\u015c\6\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\23\7\1\u015d\4\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\4\7\1\u015e\23\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\20\7\1\u015f\7\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\10\7\1\u0160\17\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\16\7\1\u0161\4\7\1\u0162"+
    "\4\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\3\7\1\u0163\24\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\u0164"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\14\7\1\u0165\13\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\12\7\1\u0166"+
    "\15\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\4\7\1\u0167\23\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\7\7\1\u0168"+
    "\20\7\4\0\2\7\10\0\1\7\13\0\3\7\1\u0169"+
    "\2\7\1\u016a\2\7\6\0\22\7\4\0\30\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\22\7\1\u016b\5\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\5\7\1\u016c\22\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\6\7\1\u016d\21\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\12\7\1\u016e\15\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\4\7\1\u016f\23\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\14\7\1\u0170\13\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\22\7\1\u0171\5\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\6\7\1\u0172\21\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\22\7\1\u0173\5\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\7\7\1\u0174\20\7\4\0"+
    "\2\7\10\0\1\7\13\0\6\7\1\u0175\2\7\6\0"+
    "\22\7\4\0\30\7\4\0\2\7\10\0\1\7\13\0"+
    "\2\7\1\u0176\6\7\6\0\22\7\4\0\30\7\4\0"+
    "\2\7\10\0\1\7\13\0\4\7\1\u0177\4\7\6\0"+
    "\22\7\4\0\30\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\22\7\1\u0178\5\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\4\7\1\u0179\23\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\14\7\1\u017a\13\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\5\7\1\u017b"+
    "\14\7\4\0\30\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\5\7\1\u017c\14\7\4\0\30\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\5\7\1\u017d\22\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\5\7\1\u017e\22\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\14\7\1\u017f\13\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\27\7\1\u0180\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\23\7"+
    "\1\u0181\4\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\23\7\1\u0182\4\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\3\7"+
    "\1\u0183\24\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\4\7\1\u0184\23\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\5\7"+
    "\1\u0185\22\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\20\7\1\u0186\7\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\4\7"+
    "\1\u0187\23\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\20\7\1\u0188\7\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\4\7"+
    "\1\u0189\23\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\14\7\1\u018a\13\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\5\7"+
    "\1\u018b\22\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\4\7\1\u018c\23\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\6\7"+
    "\1\u018d\21\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\1\u018e\27\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\5\7\1\u018f"+
    "\22\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\26\7\1\u0190\1\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\23\7\1\u0191"+
    "\4\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\22\7\1\u0192\5\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\20\7\1\u0193"+
    "\7\7\4\0\2\7\10\0\1\7\13\0\2\7\1\u0194"+
    "\6\7\6\0\22\7\4\0\30\7\4\0\2\7\10\0"+
    "\1\7\13\0\4\7\1\u0195\4\7\6\0\22\7\4\0"+
    "\30\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\1\u0196\27\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\4\7\1\u0197\23\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\14\7\1\u0198\13\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\20\7\1\u0199\7\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\20\7\1\u019a\7\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\21\7\1\u019b\6\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\15\7\1\u019c\12\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\23\7\1\u019d\4\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\10\7\1\u019e\17\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\10\7\1\u019f\17\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\27\7\1\u01a0\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\22\7\1\u01a1\5\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\14\7\1\u01a2\13\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\14\7\1\u01a3\13\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\4\7\1\u01a4\23\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\1\u01a5\21\7\4\0\30\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\22\7"+
    "\1\u01a6\5\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\16\7\1\u01a7\3\7\4\0\30\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\16\7\1\u01a8\3\7"+
    "\4\0\30\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\20\7\1\u01a9\7\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\2\7"+
    "\1\u01aa\25\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\22\7\1\u01ab\5\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\5\7"+
    "\1\u01ac\22\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\7\7\1\u01ad\20\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\2\7"+
    "\1\u01ae\25\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\5\7\1\u01af\22\7\4\0\2\7"+
    "\10\0\1\7\13\0\1\7\1\u01b0\4\7\1\u01b1\2\7"+
    "\6\0\22\7\4\0\30\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\4\7\1\u01b2\23\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\15\7\1\u01b3\12\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\2\7\1\u01b4\25\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\1\u01b5"+
    "\14\7\1\u01b6\4\7\4\0\30\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\12\7\1\u01b7"+
    "\15\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\14\7\1\u01b8\13\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\26\7\1\u01b9"+
    "\1\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\26\7\1\u01ba\1\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\u01bb"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\2\7\1\u01bc\25\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\u01bd"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\26\7\1\u01be\1\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\12\7\1\u01bf"+
    "\15\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\4\7\1\u01c0\23\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\16\7\1\u01c1"+
    "\11\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\16\7\1\u01c2\11\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\16\7\1\u01c3\3\7\4\0"+
    "\30\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\5\7\1\u01c4\14\7\4\0\30\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\10\7\1\u01c5"+
    "\17\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\22\7\1\u01c6\5\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\u01c7"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\10\7\1\u01c8\17\7\4\0\2\7\10\0"+
    "\1\7\13\0\2\7\1\u01c9\6\7\6\0\22\7\4\0"+
    "\30\7\4\0\2\7\10\0\1\7\13\0\4\7\1\u01ca"+
    "\4\7\6\0\22\7\4\0\30\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\23\7\1\u01cb"+
    "\4\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\4\7\1\u01cc\23\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\14\7\1\u01cd"+
    "\13\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\23\7\1\u01ce\4\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\3\7\1\u01cf"+
    "\24\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\2\7\1\u01d0\25\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\1\u01d1\1\u01d2\3\7\1\u01d3"+
    "\14\7\4\0\30\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\12\7\1\u01d4\15\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\20\7\1\u01d5\7\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\4\7\1\u01d6\23\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\4\7\1\u01d7\23\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\16\7\1\u01d8\11\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\23\7\1\u01d9\4\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\26\7\1\u01da\1\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\5\7\1\u01db"+
    "\14\7\4\0\30\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\26\7\1\u01dc\1\7\4\0"+
    "\2\7\10\0\1\7\13\0\7\7\1\u01dd\1\7\6\0"+
    "\22\7\4\0\30\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\6\7\1\u01de\21\7\4\0"+
    "\2\7\10\0\1\7\13\0\11\7\6\0\22\7\4\0"+
    "\27\7\1\u01df\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\14\7\1\u01e0\13\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\14\7"+
    "\1\u01e1\13\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\27\7\1\u01e2\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\23\7\1\u01e3"+
    "\4\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\13\7\1\u01e4\6\7\4\0\30\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\2\7\1\u01e5"+
    "\25\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\2\7\1\u01e6\25\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\u01e7"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\14\7\1\u01e8\13\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\23\7\1\u01e9"+
    "\4\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\7\7\1\u01ea\20\7\4\0\2\7\10\0"+
    "\1\7\13\0\11\7\6\0\22\7\4\0\4\7\1\u01eb"+
    "\23\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\27\7\1\u01ec\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\22\7\1\u01ed\5\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\14\7\1\u01ee\13\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\10\7\1\u01ef\17\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\10\7\1\u01f0\17\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\2\7\1\u01f1\25\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\2\7\1\u01f2\25\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\14\7\1\u01f3\13\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\4\7\1\u01f4\23\7\4\0\2\7\10\0\1\7"+
    "\13\0\11\7\6\0\22\7\4\0\2\7\1\u01f5\25\7"+
    "\4\0\2\7\10\0\1\7\13\0\11\7\6\0\22\7"+
    "\4\0\1\u01f6\27\7\4\0\2\7\10\0\1\7\13\0"+
    "\11\7\6\0\22\7\4\0\1\u01f7\27\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\10\7"+
    "\1\u01f8\17\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\2\7\1\u01f9\25\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\12\7"+
    "\1\u01fa\15\7\4\0\2\7\10\0\1\7\13\0\11\7"+
    "\6\0\22\7\4\0\12\7\1\u01fb\15\7\4\0\2\7"+
    "\10\0\1\7\13\0\11\7\6\0\22\7\4\0\1\u01fc"+
    "\27\7\4\0\2\7\10\0\1\7\13\0\11\7\6\0"+
    "\22\7\4\0\12\7\1\u01fd\15\7\4\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33321];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\2\11\2\1\1\11\6\1\1\11"+
    "\17\1\2\11\22\1\1\11\1\1\4\11\1\0\3\11"+
    "\1\1\1\11\1\0\5\11\1\0\3\1\1\11\1\1"+
    "\2\0\3\11\1\1\3\11\1\1\1\0\15\1\1\11"+
    "\42\1\2\11\2\1\1\11\2\1\1\11\2\0\1\1"+
    "\3\11\72\1\1\0\1\1\1\11\u0126\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GoLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public GoToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return GoToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return GoToken.BAD_CHARACTER;
            }
            // fall through
          case 166: break;
          case 2:
            { return GoToken.WHITESPACE;
            }
            // fall through
          case 167: break;
          case 3:
            { return GoToken.NOT;
            }
            // fall through
          case 168: break;
          case 4:
            { return GoToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 169: break;
          case 5:
            { return GoToken.IDENTIFIER;
            }
            // fall through
          case 170: break;
          case 6:
            { return GoToken.MOD;
            }
            // fall through
          case 171: break;
          case 7:
            { return GoToken.AND;
            }
            // fall through
          case 172: break;
          case 8:
            { return GoToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 173: break;
          case 9:
            { return GoToken.LPAREN;
            }
            // fall through
          case 174: break;
          case 10:
            { return GoToken.RPAREN;
            }
            // fall through
          case 175: break;
          case 11:
            { return GoToken.MULT;
            }
            // fall through
          case 176: break;
          case 12:
            { return GoToken.PLUS;
            }
            // fall through
          case 177: break;
          case 13:
            { return GoToken.COMMA;
            }
            // fall through
          case 178: break;
          case 14:
            { return GoToken.MINUS;
            }
            // fall through
          case 179: break;
          case 15:
            { return GoToken.DOT;
            }
            // fall through
          case 180: break;
          case 16:
            { return GoToken.DIV;
            }
            // fall through
          case 181: break;
          case 17:
            { return GoToken.LITERAL_NUMBER_DECIMAL_INT;
            }
            // fall through
          case 182: break;
          case 18:
            { return GoToken.COLON;
            }
            // fall through
          case 183: break;
          case 19:
            { return GoToken.SEMICOLON;
            }
            // fall through
          case 184: break;
          case 20:
            { return GoToken.LT;
            }
            // fall through
          case 185: break;
          case 21:
            { return GoToken.EQ;
            }
            // fall through
          case 186: break;
          case 22:
            { return GoToken.GT;
            }
            // fall through
          case 187: break;
          case 23:
            { return GoToken.QUEST;
            }
            // fall through
          case 188: break;
          case 24:
            { return GoToken.LBRACK;
            }
            // fall through
          case 189: break;
          case 25:
            { return GoToken.RBRACK;
            }
            // fall through
          case 190: break;
          case 26:
            { return GoToken.XOR;
            }
            // fall through
          case 191: break;
          case 27:
            { return GoToken.LBRACE;
            }
            // fall through
          case 192: break;
          case 28:
            { return GoToken.OR;
            }
            // fall through
          case 193: break;
          case 29:
            { return GoToken.RBRACE;
            }
            // fall through
          case 194: break;
          case 30:
            { return GoToken.TILDE;
            }
            // fall through
          case 195: break;
          case 31:
            { return GoToken.NOTEQ;
            }
            // fall through
          case 196: break;
          case 32:
            { return GoToken.MODEQ;
            }
            // fall through
          case 197: break;
          case 33:
            { return GoToken.ANDAND;
            }
            // fall through
          case 198: break;
          case 34:
            { return GoToken.ANDEQ;
            }
            // fall through
          case 199: break;
          case 35:
            { return GoToken.ANDXOR;
            }
            // fall through
          case 200: break;
          case 36:
            { return GoToken.MULTEQ;
            }
            // fall through
          case 201: break;
          case 37:
            { return GoToken.PLUSPLUS;
            }
            // fall through
          case 202: break;
          case 38:
            { return GoToken.PLUSEQ;
            }
            // fall through
          case 203: break;
          case 39:
            { return GoToken.MINUSMINUS;
            }
            // fall through
          case 204: break;
          case 40:
            { return GoToken.MINUSEQ;
            }
            // fall through
          case 205: break;
          case 41:
            { return GoToken.LITERAL_NUMBER_FLOAT;
            }
            // fall through
          case 206: break;
          case 42:
            { return GoToken.BLOCK_COMMENT;
            }
            // fall through
          case 207: break;
          case 43:
            { return GoToken.LINE_COMMENT;
            }
            // fall through
          case 208: break;
          case 44:
            { return GoToken.DIVEQ;
            }
            // fall through
          case 209: break;
          case 45:
            { return GoToken.COLONEQ;
            }
            // fall through
          case 210: break;
          case 46:
            { return GoToken.ARROW;
            }
            // fall through
          case 211: break;
          case 47:
            { return GoToken.GTGT;
            }
            // fall through
          case 212: break;
          case 48:
            { return GoToken.LTEQ;
            }
            // fall through
          case 213: break;
          case 49:
            { return GoToken.EQEQ;
            }
            // fall through
          case 214: break;
          case 50:
            { return GoToken.GTEQ;
            }
            // fall through
          case 215: break;
          case 51:
            { return GoToken.LTLT;
            }
            // fall through
          case 216: break;
          case 52:
            { return GoToken.XOREQ;
            }
            // fall through
          case 217: break;
          case 53:
            { return GoToken.GO;
            }
            // fall through
          case 218: break;
          case 54:
            { return GoToken.IF;
            }
            // fall through
          case 219: break;
          case 55:
            { return GoToken.OREQ;
            }
            // fall through
          case 220: break;
          case 56:
            { return GoToken.OROR;
            }
            // fall through
          case 221: break;
          case 57:
            { return GoToken.ANDXOREQ;
            }
            // fall through
          case 222: break;
          case 58:
            { return GoToken.ELLIPSIS;
            }
            // fall through
          case 223: break;
          case 59:
            { return GoToken.LITERAL_NUMBER_HEXADECIMAL;
            }
            // fall through
          case 224: break;
          case 60:
            { return GoToken.LTLTEQ;
            }
            // fall through
          case 225: break;
          case 61:
            { return GoToken.GTGTEQ;
            }
            // fall through
          case 226: break;
          case 62:
            { return GoToken.TRIGRAPH;
            }
            // fall through
          case 227: break;
          case 63:
            { return GoToken.MAP;
            }
            // fall through
          case 228: break;
          case 64:
            { return GoToken.CAP;
            }
            // fall through
          case 229: break;
          case 65:
            { return GoToken.FOR;
            }
            // fall through
          case 230: break;
          case 66:
            { return GoToken.INT;
            }
            // fall through
          case 231: break;
          case 67:
            { return GoToken.LEN;
            }
            // fall through
          case 232: break;
          case 68:
            { return GoToken.NEW;
            }
            // fall through
          case 233: break;
          case 69:
            { return GoToken.NIL;
            }
            // fall through
          case 234: break;
          case 70:
            { return GoToken.VAR;
            }
            // fall through
          case 235: break;
          case 71:
            { return GoToken.JOIN;
            }
            // fall through
          case 236: break;
          case 72:
            { return GoToken.TRIM;
            }
            // fall through
          case 237: break;
          case 73:
            { return GoToken.BOOL;
            }
            // fall through
          case 238: break;
          case 74:
            { return GoToken.BYTE;
            }
            // fall through
          case 239: break;
          case 75:
            { return GoToken.CASE;
            }
            // fall through
          case 240: break;
          case 76:
            { return GoToken.CHAN;
            }
            // fall through
          case 241: break;
          case 77:
            { return GoToken.COPY;
            }
            // fall through
          case 242: break;
          case 78:
            { return GoToken.ELSE;
            }
            // fall through
          case 243: break;
          case 79:
            { return GoToken.FUNC;
            }
            // fall through
          case 244: break;
          case 80:
            { return GoToken.GOTO;
            }
            // fall through
          case 245: break;
          case 81:
            { return GoToken.IMAG;
            }
            // fall through
          case 246: break;
          case 82:
            { return GoToken.INT_8;
            }
            // fall through
          case 247: break;
          case 83:
            { return GoToken.MAKE;
            }
            // fall through
          case 248: break;
          case 84:
            { return GoToken.REAL;
            }
            // fall through
          case 249: break;
          case 85:
            { return GoToken.RUNE;
            }
            // fall through
          case 250: break;
          case 86:
            { return GoToken.TRUE;
            }
            // fall through
          case 251: break;
          case 87:
            { return GoToken.TYPE;
            }
            // fall through
          case 252: break;
          case 88:
            { return GoToken.UINT;
            }
            // fall through
          case 253: break;
          case 89:
            { return GoToken.COUNT;
            }
            // fall through
          case 254: break;
          case 90:
            { return GoToken.INDEX;
            }
            // fall through
          case 255: break;
          case 91:
            { return GoToken.SPLIT;
            }
            // fall through
          case 256: break;
          case 92:
            { return GoToken.TITLE;
            }
            // fall through
          case 257: break;
          case 93:
            { return GoToken.BREAK;
            }
            // fall through
          case 258: break;
          case 94:
            { return GoToken.CLOSE;
            }
            // fall through
          case 259: break;
          case 95:
            { return GoToken.CONST;
            }
            // fall through
          case 260: break;
          case 96:
            { return GoToken.DEFER;
            }
            // fall through
          case 261: break;
          case 97:
            { return GoToken.FALSE;
            }
            // fall through
          case 262: break;
          case 98:
            { return GoToken.INT_16;
            }
            // fall through
          case 263: break;
          case 99:
            { return GoToken.INT_32;
            }
            // fall through
          case 264: break;
          case 100:
            { return GoToken.INT_64;
            }
            // fall through
          case 265: break;
          case 101:
            { return GoToken.PANIC;
            }
            // fall through
          case 266: break;
          case 102:
            { return GoToken.PRINT;
            }
            // fall through
          case 267: break;
          case 103:
            { return GoToken.RANGE;
            }
            // fall through
          case 268: break;
          case 104:
            { return GoToken.UINT_8;
            }
            // fall through
          case 269: break;
          case 105:
            { return GoToken.FIELDS;
            }
            // fall through
          case 270: break;
          case 106:
            { return GoToken.REPEAT;
            }
            // fall through
          case 271: break;
          case 107:
            { return GoToken.SPLIT_N;
            }
            // fall through
          case 272: break;
          case 108:
            { return GoToken.APPEND;
            }
            // fall through
          case 273: break;
          case 109:
            { return GoToken.DELETE;
            }
            // fall through
          case 274: break;
          case 110:
            { return GoToken.IMPORT;
            }
            // fall through
          case 275: break;
          case 111:
            { return GoToken.RETURN;
            }
            // fall through
          case 276: break;
          case 112:
            { return GoToken.SELECT;
            }
            // fall through
          case 277: break;
          case 113:
            { return GoToken.STRING;
            }
            // fall through
          case 278: break;
          case 114:
            { return GoToken.STRUCT;
            }
            // fall through
          case 279: break;
          case 115:
            { return GoToken.SWITCH;
            }
            // fall through
          case 280: break;
          case 116:
            { return GoToken.UINT_16;
            }
            // fall through
          case 281: break;
          case 117:
            { return GoToken.UINT_32;
            }
            // fall through
          case 282: break;
          case 118:
            { return GoToken.UINT_64;
            }
            // fall through
          case 283: break;
          case 119:
            { return GoToken.COMPARE;
            }
            // fall through
          case 284: break;
          case 120:
            { return GoToken.REPLACE;
            }
            // fall through
          case 285: break;
          case 121:
            { return GoToken.TO_LOWER;
            }
            // fall through
          case 286: break;
          case 122:
            { return GoToken.TO_TITLE;
            }
            // fall through
          case 287: break;
          case 123:
            { return GoToken.TO_UPPER;
            }
            // fall through
          case 288: break;
          case 124:
            { return GoToken.COMPLEX;
            }
            // fall through
          case 289: break;
          case 125:
            { return GoToken.DEFAULT;
            }
            // fall through
          case 290: break;
          case 126:
            { return GoToken.FLOAT_32;
            }
            // fall through
          case 291: break;
          case 127:
            { return GoToken.FLOAT_64;
            }
            // fall through
          case 292: break;
          case 128:
            { return GoToken.PACKAGE;
            }
            // fall through
          case 293: break;
          case 129:
            { return GoToken.PRINTLN;
            }
            // fall through
          case 294: break;
          case 130:
            { return GoToken.RECOVER;
            }
            // fall through
          case 295: break;
          case 131:
            { return GoToken.UINTPTR;
            }
            // fall through
          case 296: break;
          case 132:
            { return GoToken.CONTAINS;
            }
            // fall through
          case 297: break;
          case 133:
            { return GoToken.INDEX_ANY;
            }
            // fall through
          case 298: break;
          case 134:
            { return GoToken.TRIM_FUNC;
            }
            // fall through
          case 299: break;
          case 135:
            { return GoToken.TRIM_LEFT;
            }
            // fall through
          case 300: break;
          case 136:
            { return GoToken.CONTINUE;
            }
            // fall through
          case 301: break;
          case 137:
            { return GoToken.HAS_PREFIX;
            }
            // fall through
          case 302: break;
          case 138:
            { return GoToken.HAS_SUFFIX;
            }
            // fall through
          case 303: break;
          case 139:
            { return GoToken.INDEX_BYTE;
            }
            // fall through
          case 304: break;
          case 140:
            { return GoToken.INDEX_FUNC;
            }
            // fall through
          case 305: break;
          case 141:
            { return GoToken.INDEX_RUNE;
            }
            // fall through
          case 306: break;
          case 142:
            { return GoToken.LAST_INDEX;
            }
            // fall through
          case 307: break;
          case 143:
            { return GoToken.TRIM_RIGHT;
            }
            // fall through
          case 308: break;
          case 144:
            { return GoToken.TRIM_SPACE;
            }
            // fall through
          case 309: break;
          case 145:
            { return GoToken.COMPLEX_64;
            }
            // fall through
          case 310: break;
          case 146:
            { return GoToken.INTERFACE;
            }
            // fall through
          case 311: break;
          case 147:
            { return GoToken.EQUALS_FOLD;
            }
            // fall through
          case 312: break;
          case 148:
            { return GoToken.FIELDS_FUNC;
            }
            // fall through
          case 313: break;
          case 149:
            { return GoToken.REPLACE_ALL;
            }
            // fall through
          case 314: break;
          case 150:
            { return GoToken.SPLIT_AFTER;
            }
            // fall through
          case 315: break;
          case 151:
            { return GoToken.TRIM_PREFIX;
            }
            // fall through
          case 316: break;
          case 152:
            { return GoToken.TRIM_SUFFIX;
            }
            // fall through
          case 317: break;
          case 153:
            { return GoToken.COMPLEX_128;
            }
            // fall through
          case 318: break;
          case 154:
            { return GoToken.CONTAINS_ANY;
            }
            // fall through
          case 319: break;
          case 155:
            { return GoToken.SPLIT_AFTER_N;
            }
            // fall through
          case 320: break;
          case 156:
            { return GoToken.FALLTHROUGH;
            }
            // fall through
          case 321: break;
          case 157:
            { return GoToken.CONTAINS_RUNE;
            }
            // fall through
          case 322: break;
          case 158:
            { return GoToken.LAST_INDEX_ANY;
            }
            // fall through
          case 323: break;
          case 159:
            { return GoToken.TRIM_LEFT_FUNC;
            }
            // fall through
          case 324: break;
          case 160:
            { return GoToken.LAST_INDEX_BYTE;
            }
            // fall through
          case 325: break;
          case 161:
            { return GoToken.LAST_INDEX_FUNC;
            }
            // fall through
          case 326: break;
          case 162:
            { return GoToken.TRIM_RIGHT_FUNC;
            }
            // fall through
          case 327: break;
          case 163:
            { return GoToken.TO_LOWER_SPECIAL;
            }
            // fall through
          case 328: break;
          case 164:
            { return GoToken.TO_TITLE_SPECIAL;
            }
            // fall through
          case 329: break;
          case 165:
            { return GoToken.TO_UPPSER_SPECIAL;
            }
            // fall through
          case 330: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
