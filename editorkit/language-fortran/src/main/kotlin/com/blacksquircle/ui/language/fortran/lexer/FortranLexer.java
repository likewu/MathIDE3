/*
 * Copyright 2023 Squircle CE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.fortran.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>fortran.flex</tt>
 */
public class FortranLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\10\u3000\31\u2000\1\u1100\1\u3100\1\u3200\1\u1100\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00"+
    "\1\u1100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2000\1\u5000\1\u5100"+
    "\1\u5200\1\u5300\3\u1100\1\u5400\1\u5500\1\u5600\12\u2000\4\u1100"+
    "\1\u5700\17\u2000\2\u1100\1\u5800\41\u2000\2\u1100\1\u5900\1\u5a00"+
    "\2\u2000\1\u5b00\1\u5c00\27\u1100\1\u5d00\4\u1100\1\u5e00\1\u5f00"+
    "\42\u2000\1\u1100\1\u6000\1\u6100\11\u2000\1\u6200\24\u2000\1\u6300"+
    "\1\u6400\1\u2000\1\u6500\1\u6600\1\u6700\1\u6800\2\u2000\1\u6900"+
    "\5\u2000\1\u6a00\1\u6b00\1\u6c00\5\u2000\1\u6d00\1\u6e00\2\u2000"+
    "\1\u6f00\1\u2000\1\u7000\14\u2000\1\u7100\4\u2000\246\u1100\1\u7200"+
    "\20\u1100\1\u7300\1\u7400\25\u1100\1\u7500\34\u1100\1\u7600\14\u2000"+
    "\2\u1100\1\u7700\5\u2000\23\u1100\1\u7800\u0aec\u2000\1\u7900\1\u7a00"+
    "\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\6\1\12\1\13"+
    "\1\14\1\15\1\6\1\16\1\6\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\7\24\1\25\1\6\1\26\1\27"+
    "\1\30\2\6\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\6"+
    "\1\66\1\6\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\67\1\6\1\70\1\6"+
    "\6\0\1\71\32\0\2\6\4\11\4\6\1\11\2\6"+
    "\1\0\7\6\1\11\4\6\1\11\5\6\27\11\1\6"+
    "\37\11\1\6\70\11\2\41\115\11\1\53\u0142\11\4\6"+
    "\14\11\16\6\5\11\7\6\1\11\1\6\1\11\21\6"+
    "\160\0\5\11\1\6\2\11\2\6\4\11\1\6\1\11"+
    "\6\6\1\11\1\6\3\11\1\6\1\11\1\6\24\11"+
    "\1\6\123\11\1\6\213\11\1\6\5\0\2\6\246\11"+
    "\1\6\46\11\2\6\1\11\6\6\51\11\6\6\1\11"+
    "\1\6\55\0\1\6\1\0\1\6\2\0\1\6\2\0"+
    "\1\6\1\0\10\6\33\11\4\6\4\11\15\6\6\0"+
    "\5\6\1\11\4\6\13\0\1\6\1\0\3\6\53\11"+
    "\37\0\4\6\2\11\1\0\143\11\1\6\1\11\10\0"+
    "\1\6\6\0\2\11\2\0\1\6\4\0\2\11\12\0"+
    "\3\11\2\6\1\11\17\6\1\0\1\11\1\0\36\11"+
    "\33\0\2\6\131\11\13\0\1\11\16\6\12\0\41\11"+
    "\11\0\2\11\4\6\1\11\2\6\1\0\30\11\4\0"+
    "\1\11\11\0\1\11\3\0\1\11\5\0\22\6\31\11"+
    "\3\0\4\6\13\11\65\6\25\11\1\6\22\11\13\6"+
    "\61\0\66\11\3\0\1\11\22\0\1\11\7\0\12\11"+
    "\2\0\2\6\12\0\1\6\20\11\3\0\1\6\10\11"+
    "\2\6\2\11\2\6\26\11\1\6\7\11\1\6\1\11"+
    "\3\6\4\11\2\6\1\0\1\11\7\0\2\6\2\0"+
    "\2\6\3\0\1\11\10\6\1\0\4\6\2\11\1\6"+
    "\3\11\2\0\2\6\12\0\4\11\7\6\2\11\1\6"+
    "\1\0\2\6\3\0\1\6\6\11\4\6\2\11\2\6"+
    "\26\11\1\6\7\11\1\6\2\11\1\6\2\11\1\6"+
    "\2\11\2\6\1\0\1\6\5\0\4\6\2\0\2\6"+
    "\3\0\3\6\1\0\7\6\4\11\1\6\1\11\7\6"+
    "\14\0\3\11\1\0\13\6\3\0\1\6\11\11\1\6"+
    "\3\11\1\6\26\11\1\6\7\11\1\6\2\11\1\6"+
    "\5\11\2\6\1\0\1\11\10\0\1\6\3\0\1\6"+
    "\3\0\2\6\1\11\17\6\2\11\2\0\2\6\12\0"+
    "\1\6\1\11\7\6\1\11\6\0\1\6\3\0\1\6"+
    "\10\11\2\6\2\11\2\6\26\11\1\6\7\11\1\6"+
    "\2\11\1\6\5\11\2\6\1\0\1\11\7\0\2\6"+
    "\2\0\2\6\3\0\7\6\3\0\4\6\2\11\1\6"+
    "\3\11\2\0\2\6\12\0\1\6\1\11\20\6\1\0"+
    "\1\11\1\6\6\11\3\6\3\11\1\6\4\11\3\6"+
    "\2\11\1\6\1\11\1\6\2\11\3\6\2\11\3\6"+
    "\3\11\3\6\14\11\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\11\6\6\1\0\16\6\12\0\11\6"+
    "\1\11\6\6\5\0\10\11\1\6\3\11\1\6\27\11"+
    "\1\6\20\11\3\6\1\11\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\1\6\3\11\5\6\2\11\2\0"+
    "\2\6\12\0\20\6\1\11\3\0\1\6\10\11\1\6"+
    "\3\11\1\6\27\11\1\6\12\11\1\6\5\11\2\6"+
    "\1\0\1\11\7\0\1\6\3\0\1\6\4\0\7\6"+
    "\2\0\7\6\1\11\1\6\2\11\2\0\2\6\12\0"+
    "\1\6\2\11\15\6\4\0\11\11\1\6\3\11\1\6"+
    "\51\11\2\0\1\11\7\0\1\6\3\0\1\6\4\0"+
    "\1\11\5\6\3\11\1\0\7\6\3\11\2\0\2\6"+
    "\12\0\12\6\6\11\1\6\3\0\1\6\22\11\3\6"+
    "\30\11\1\6\11\11\1\6\1\11\2\6\7\11\3\6"+
    "\1\0\4\6\6\0\1\6\1\0\1\6\10\0\6\6"+
    "\12\0\2\6\2\0\15\6\60\11\1\0\2\11\7\0"+
    "\4\6\10\11\10\0\1\6\12\0\47\6\2\11\1\6"+
    "\1\11\1\6\5\11\1\6\30\11\1\6\1\11\1\6"+
    "\12\11\1\0\2\11\11\0\1\11\2\6\5\11\1\6"+
    "\1\11\1\6\6\0\2\6\12\0\2\6\4\11\40\6"+
    "\1\11\27\6\2\0\6\6\12\0\13\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\2\0\10\11\1\6\44\11"+
    "\4\6\24\0\1\6\2\0\5\11\13\0\1\6\44\0"+
    "\11\6\1\0\71\6\53\11\24\0\1\11\12\0\6\6"+
    "\6\11\4\0\4\11\3\0\1\11\3\0\2\11\7\0"+
    "\3\11\4\0\15\11\14\0\1\11\17\0\2\6\46\11"+
    "\1\6\1\11\5\6\1\11\2\6\53\11\1\6\u014d\11"+
    "\1\6\4\11\2\6\7\11\1\6\1\11\1\6\4\11"+
    "\2\6\51\11\1\6\4\11\2\6\41\11\1\6\4\11"+
    "\2\6\7\11\1\6\1\11\1\6\4\11\2\6\17\11"+
    "\1\6\71\11\1\6\4\11\2\6\103\11\2\6\3\0"+
    "\40\6\20\11\20\6\126\11\2\6\6\11\3\6\u016c\11"+
    "\2\6\21\11\1\6\32\11\5\6\113\11\3\6\13\11"+
    "\7\6\15\11\1\6\4\11\3\0\13\6\22\11\3\0"+
    "\13\6\22\11\2\0\14\6\15\11\1\6\3\11\1\6"+
    "\2\0\14\6\64\11\40\0\3\6\1\11\3\6\2\11"+
    "\1\0\2\6\12\0\41\6\4\0\1\6\12\0\6\6"+
    "\131\11\7\6\5\11\2\0\42\11\1\0\1\11\5\6"+
    "\106\11\12\6\37\11\1\6\14\0\4\6\14\0\12\6"+
    "\12\0\36\11\2\6\5\11\13\6\54\11\4\6\32\11"+
    "\6\6\12\0\46\6\27\11\5\0\4\6\65\11\12\0"+
    "\1\6\35\0\2\6\13\0\6\6\12\0\15\6\1\11"+
    "\10\6\16\0\1\6\2\0\77\6\5\0\57\11\21\0"+
    "\7\11\4\6\12\0\21\6\11\0\14\6\3\0\36\11"+
    "\15\0\2\11\12\0\54\11\16\0\14\6\44\11\24\0"+
    "\10\6\12\0\3\6\3\11\12\0\44\11\2\6\11\11"+
    "\7\6\53\11\2\6\3\11\20\6\3\0\1\6\25\0"+
    "\4\11\1\0\6\11\1\0\2\11\3\0\1\11\5\6"+
    "\300\11\72\0\1\6\5\0\26\11\2\6\6\11\2\6"+
    "\46\11\2\6\6\11\2\6\10\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\37\11\2\6\65\11\1\6"+
    "\7\11\1\6\1\11\3\6\3\11\1\6\7\11\3\6"+
    "\4\11\2\6\6\11\4\6\15\11\5\6\3\11\1\6"+
    "\7\11\16\6\5\0\30\6\2\3\5\0\20\6\2\11"+
    "\23\6\1\11\13\6\5\0\1\6\12\0\1\6\1\11"+
    "\15\6\1\11\20\6\15\11\3\6\40\11\20\6\15\0"+
    "\4\6\1\0\3\6\14\0\21\6\1\11\4\6\1\11"+
    "\2\6\12\11\1\6\1\11\3\6\5\11\6\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\43\3\11\1\6"+
    "\13\11\2\6\4\11\5\6\5\11\4\6\1\11\21\6"+
    "\51\11\u0177\6\57\11\1\6\57\11\1\6\205\11\6\6"+
    "\4\11\3\0\2\11\14\6\46\11\1\6\1\11\5\6"+
    "\1\11\2\6\70\11\7\6\1\11\17\6\1\0\27\11"+
    "\11\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\7\11\1\6\7\11\1\6\7\11\1\6\7\11"+
    "\1\6\40\0\57\6\1\11\325\6\3\11\31\6\11\11"+
    "\6\0\1\6\5\11\2\6\5\11\4\6\126\11\2\6"+
    "\2\0\2\6\3\11\1\6\132\11\1\6\4\11\5\6"+
    "\53\11\1\6\136\11\21\6\40\11\60\6\320\11\100\6"+
    "\375\11\3\6\215\11\103\6\56\11\2\6\15\11\3\6"+
    "\20\11\12\0\2\11\24\6\57\11\1\0\4\6\12\0"+
    "\1\6\37\11\2\0\120\11\2\0\45\6\11\11\2\6"+
    "\147\11\2\6\65\11\2\6\11\11\52\6\15\11\1\0"+
    "\3\11\1\0\4\11\1\0\27\11\5\0\4\6\1\0"+
    "\13\6\1\11\7\6\64\11\14\6\2\0\62\11\22\0"+
    "\12\6\12\0\6\6\22\0\6\11\3\6\1\11\1\6"+
    "\2\11\13\0\34\11\10\0\2\6\27\11\15\0\14\6"+
    "\35\11\3\6\4\0\57\11\16\0\16\6\1\11\12\0"+
    "\6\6\5\11\1\0\12\11\12\0\5\11\1\6\51\11"+
    "\16\0\11\6\3\11\1\0\10\11\2\0\2\6\12\0"+
    "\6\6\27\11\3\6\1\11\3\0\62\11\1\0\1\11"+
    "\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11"+
    "\30\6\3\11\2\6\13\11\5\0\2\6\3\11\2\0"+
    "\12\6\6\11\2\6\6\11\2\6\6\11\11\6\7\11"+
    "\1\6\7\11\1\6\53\11\1\6\16\11\6\6\163\11"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\11\14\6"+
    "\27\11\4\6\61\11\4\6\u0100\3\156\11\2\6\152\11"+
    "\46\6\7\11\14\6\5\11\5\6\1\11\1\0\12\11"+
    "\1\6\15\11\1\6\5\11\1\6\1\11\1\6\2\11"+
    "\1\6\2\11\1\6\154\11\41\6\153\11\22\6\100\11"+
    "\2\6\66\11\50\6\15\11\3\6\20\0\20\6\20\0"+
    "\3\6\2\11\30\6\3\11\31\6\1\11\6\6\5\11"+
    "\1\6\207\11\2\6\1\0\4\6\1\11\13\6\12\0"+
    "\7\6\32\11\4\6\1\11\1\6\32\11\13\6\131\11"+
    "\3\6\6\11\2\6\6\11\2\6\6\11\2\6\3\11"+
    "\3\6\2\11\3\6\2\11\22\6\3\0\4\6\14\11"+
    "\1\6\32\11\1\6\23\11\1\6\2\11\1\6\17\11"+
    "\2\6\16\11\42\6\173\11\105\6\65\11\210\6\1\0"+
    "\202\6\35\11\3\6\61\11\17\6\1\0\37\6\40\11"+
    "\15\6\36\11\5\6\46\11\5\0\5\6\36\11\2\6"+
    "\44\11\4\6\10\11\1\6\5\11\52\6\236\11\2\6"+
    "\12\0\6\6\44\11\4\6\44\11\4\6\50\11\10\6"+
    "\64\11\234\6\67\11\11\6\26\11\12\6\10\11\230\6"+
    "\6\11\2\6\1\11\1\6\54\11\1\6\2\11\3\6"+
    "\1\11\2\6\27\11\12\6\27\11\11\6\37\11\101\6"+
    "\23\11\1\6\2\11\12\6\26\11\12\6\32\11\106\6"+
    "\70\11\6\6\2\11\100\6\1\11\3\0\1\6\2\0"+
    "\5\6\4\0\4\11\1\6\3\11\1\6\35\11\2\6"+
    "\3\0\4\6\1\0\40\6\35\11\3\6\35\11\43\6"+
    "\10\11\1\6\34\11\2\0\31\6\66\11\12\6\26\11"+
    "\12\6\23\11\15\6\22\11\156\6\111\11\67\6\63\11"+
    "\15\6\63\11\15\6\44\11\4\0\10\6\12\0\u0146\6"+
    "\52\11\1\6\2\0\3\6\2\11\116\6\35\11\12\6"+
    "\1\11\10\6\26\11\13\0\137\6\25\11\33\6\27\11"+
    "\11\6\3\0\65\11\17\0\37\6\12\0\17\6\4\0"+
    "\55\11\13\0\2\6\1\0\17\6\1\0\2\6\31\11"+
    "\7\6\12\0\6\6\3\0\44\11\16\0\1\6\12\0"+
    "\4\6\1\11\2\0\1\11\10\6\43\11\1\0\2\6"+
    "\1\11\11\6\3\0\60\11\16\0\4\11\4\6\4\0"+
    "\1\6\14\0\1\11\1\6\1\11\43\6\22\11\1\6"+
    "\31\11\14\0\6\6\1\0\101\6\7\11\1\6\1\11"+
    "\1\6\4\11\1\6\17\11\1\6\12\11\7\6\57\11"+
    "\14\0\5\6\12\0\6\6\4\0\1\6\10\11\2\6"+
    "\2\11\2\6\26\11\1\6\7\11\1\6\2\11\1\6"+
    "\5\11\1\6\2\0\1\11\7\0\2\6\2\0\2\6"+
    "\3\0\2\6\1\11\6\6\1\0\5\6\5\11\2\0"+
    "\2\6\7\0\3\6\5\0\213\6\65\11\22\0\4\11"+
    "\5\6\12\0\4\6\1\0\3\11\36\6\60\11\24\0"+
    "\2\11\1\6\1\11\10\6\12\0\246\6\57\11\7\0"+
    "\2\6\11\0\27\6\4\11\2\0\42\6\60\11\21\0"+
    "\3\6\1\11\13\6\12\0\46\6\53\11\15\0\1\11"+
    "\7\6\12\0\66\6\33\11\2\6\17\0\4\6\12\0"+
    "\306\6\54\11\17\0\145\6\100\11\12\0\25\6\10\11"+
    "\2\6\1\11\2\6\10\11\1\6\2\11\1\6\30\11"+
    "\6\0\1\6\2\0\2\6\4\0\1\11\1\0\1\11"+
    "\2\0\14\6\12\0\106\6\10\11\2\6\47\11\7\0"+
    "\2\6\7\0\1\11\1\6\1\11\1\0\33\6\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\6\1\0\10\6"+
    "\1\11\13\0\56\11\20\0\3\6\1\11\42\6\71\11"+
    "\7\6\11\11\1\6\45\11\10\0\1\6\10\0\1\11"+
    "\17\6\12\0\30\6\36\11\2\6\26\0\1\6\16\0"+
    "\111\6\7\11\1\6\2\11\1\6\46\11\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\11\1\0\10\6"+
    "\12\0\6\6\6\11\1\6\2\11\1\6\40\11\5\0"+
    "\1\6\2\0\1\6\5\0\1\11\7\6\12\0\u0136\6"+
    "\23\11\4\0\271\6\1\11\54\6\4\11\37\6\232\11"+
    "\146\6\157\11\21\6\304\11\274\6\57\11\1\6\11\0"+
    "\307\6\107\11\271\6\71\11\7\6\37\11\1\6\12\0"+
    "\146\6\36\11\2\6\5\0\13\6\60\11\7\0\11\6"+
    "\4\11\14\6\12\0\11\6\25\11\5\6\23\11\260\6"+
    "\100\11\200\6\113\11\4\6\1\0\1\11\67\0\7\6"+
    "\4\0\15\11\100\6\2\11\1\6\1\11\1\0\13\6"+
    "\2\0\16\6\370\11\10\6\326\11\52\6\11\11\367\6"+
    "\37\11\61\6\3\11\21\6\4\11\10\6\u018c\11\4\6"+
    "\153\11\5\6\15\11\3\6\11\11\7\6\12\11\3\6"+
    "\2\0\1\6\4\0\301\6\5\0\3\6\26\0\2\6"+
    "\7\0\36\6\4\0\224\6\3\0\273\6\125\11\1\6"+
    "\107\11\1\6\2\11\2\6\1\11\2\6\2\11\2\6"+
    "\4\11\1\6\14\11\1\6\1\11\1\6\7\11\1\6"+
    "\101\11\1\6\4\11\2\6\10\11\1\6\7\11\1\6"+
    "\34\11\1\6\4\11\1\6\5\11\1\6\1\11\3\6"+
    "\7\11\1\6\u0154\11\2\6\31\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\37\11\1\6\31\11\1\6\37\11\1\6\31\11\1\6"+
    "\10\11\2\6\151\0\4\6\62\0\10\6\1\0\16\6"+
    "\1\0\26\6\5\0\1\6\17\0\120\6\7\0\1\6"+
    "\21\0\2\6\7\0\1\6\2\0\1\6\5\0\325\6"+
    "\55\11\3\6\7\0\7\11\2\6\12\0\4\6\1\11"+
    "\u0171\6\54\11\16\0\5\6\306\11\13\6\7\0\51\6"+
    "\104\11\7\0\1\11\4\6\12\0\u0156\6\1\11\117\6"+
    "\4\11\1\6\33\11\1\6\2\11\1\6\1\11\2\6"+
    "\1\11\1\6\12\11\1\6\4\11\1\6\1\11\1\6"+
    "\1\11\6\6\1\11\4\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\3\11\1\6\2\11\1\6\1\11\2\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\2\11\1\6\1\11\2\6\4\11\1\6"+
    "\7\11\1\6\4\11\1\6\4\11\1\6\1\11\1\6"+
    "\12\11\1\6\21\11\5\6\3\11\1\6\5\11\1\6"+
    "\21\11\u0134\6\12\0\6\6\336\11\42\6\65\11\13\6"+
    "\336\11\2\6\u0182\11\16\6\u0131\11\37\6\36\11\342\6"+
    "\113\11\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31488];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\1\1\12\1\1\1\13\1\14\1\15"+
    "\24\5\1\16\1\17\1\20\1\21\1\4\1\0\1\7"+
    "\1\0\1\12\10\0\1\22\1\12\1\23\1\24\1\25"+
    "\1\26\34\5\1\27\17\5\1\30\37\5\2\4\2\7"+
    "\12\0\1\12\1\31\26\5\1\32\17\5\1\33\15\5"+
    "\1\34\2\5\1\35\16\5\1\36\2\5\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\16\5"+
    "\1\50\4\5\1\51\3\5\1\52\4\5\1\0\1\53"+
    "\1\0\1\54\1\55\1\56\1\57\1\60\1\61\1\0"+
    "\1\62\1\5\1\63\1\5\1\64\2\5\1\65\1\5"+
    "\1\66\1\67\1\5\1\70\1\71\1\72\1\73\1\5"+
    "\1\74\1\75\5\5\1\76\1\77\2\5\1\100\2\5"+
    "\1\101\1\102\1\5\1\103\1\104\2\5\1\105\2\5"+
    "\1\106\1\107\2\5\1\110\5\5\1\111\1\5\1\112"+
    "\1\113\4\5\1\114\6\5\1\115\1\116\1\5\1\117"+
    "\2\5\1\120\1\121\6\5\1\122\2\5\1\123\1\124"+
    "\1\125\1\126\1\5\1\127\1\130\1\131\5\5\1\132"+
    "\1\133\4\5\1\134\1\135\1\136\1\137\1\140\1\5"+
    "\1\141\1\142\1\5\1\143\3\5\1\144\1\145\2\0"+
    "\1\146\2\5\1\147\1\150\1\151\1\152\1\153\1\154"+
    "\3\5\1\155\1\156\1\5\1\157\2\5\1\160\1\161"+
    "\1\162\1\163\1\164\1\5\1\165\5\5\1\166\1\167"+
    "\1\170\1\5\1\171\1\172\1\173\1\174\1\175\1\176"+
    "\2\5\1\177\1\5\1\200\1\201\1\5\1\202\1\203"+
    "\3\5\1\204\1\205\3\5\1\206\3\5\1\207\1\210"+
    "\3\5\1\211\1\5\1\212\7\5\1\213\1\214\1\215"+
    "\1\0\1\216\1\5\1\217\6\5\1\220\1\221\2\5"+
    "\1\222\1\5\1\223\1\224\1\225\3\5\1\226\1\227"+
    "\1\5\1\230\6\5\1\231\1\232\4\5\1\233\1\234"+
    "\1\235\2\5\1\236\2\5\1\237\1\5\1\240\3\5"+
    "\1\241\2\5\1\242\3\5\1\243\1\244\1\245\1\5"+
    "\1\246\2\5\1\247\4\5\1\250\2\5\1\251\1\252"+
    "\3\5\1\253\1\254\1\255\5\5\1\256\1\5\1\257"+
    "\1\260\1\261\1\5\1\262\1\263\1\264\1\265\1\266"+
    "\1\267\2\5\1\270\1\271\1\272";

  private static int [] zzUnpackAction() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\256\0\350\0\u0122\0\72"+
    "\0\u015c\0\72\0\72\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\72\0\72"+
    "\0\72\0\72\0\72\0\u07b4\0\72\0\u07ee\0\u0828\0\u0862"+
    "\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\72"+
    "\0\u0a32\0\72\0\72\0\72\0\72\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"+
    "\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00"+
    "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0"+
    "\0\u0122\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066"+
    "\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976"+
    "\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16"+
    "\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6"+
    "\0\u2f20\0\u2f5a\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122\0\u2f94"+
    "\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164"+
    "\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334"+
    "\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504"+
    "\0\u353e\0\u3578\0\u0122\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a"+
    "\0\72\0\u36d4\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\u370e\0\u0122\0\u3748\0\u0122\0\u3782\0\u37bc\0\u37f6\0\u3830"+
    "\0\u0122\0\u386a\0\u0122\0\u38a4\0\u38de\0\u0122\0\u0122\0\u0122"+
    "\0\u0122\0\u3918\0\u3952\0\u0122\0\u398c\0\u39c6\0\u3a00\0\u3a3a"+
    "\0\u3a74\0\u0122\0\u0122\0\u3aae\0\u3ae8\0\u0122\0\u3b22\0\u3b5c"+
    "\0\u3b96\0\u0122\0\u3bd0\0\u3c0a\0\u0122\0\u3c44\0\u3c7e\0\u0122"+
    "\0\u3cb8\0\u3cf2\0\u0122\0\u3d2c\0\u3d66\0\u3da0\0\u0122\0\u3dda"+
    "\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa"+
    "\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u0122\0\u40cc\0\u4106\0\u4140"+
    "\0\u417a\0\u41b4\0\u41ee\0\u0122\0\u0122\0\u4228\0\u0122\0\u4262"+
    "\0\u429c\0\u0122\0\u0122\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be"+
    "\0\u43f8\0\u0122\0\u4432\0\u446c\0\u0122\0\u0122\0\u0122\0\u0122"+
    "\0\u44a6\0\u0122\0\u0122\0\u0122\0\u44e0\0\u451a\0\u4554\0\u458e"+
    "\0\u45c8\0\u0122\0\u0122\0\u4602\0\u463c\0\u4676\0\u46b0\0\u0122"+
    "\0\u0122\0\u0122\0\u0122\0\u0122\0\u46ea\0\u0122\0\u0122\0\u4724"+
    "\0\u0122\0\u475e\0\u4798\0\u47d2\0\u0122\0\72\0\u480c\0\u4846"+
    "\0\u0122\0\u4880\0\u48ba\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122"+
    "\0\u0122\0\u48f4\0\u492e\0\u4968\0\u0122\0\u0122\0\u49a2\0\u0122"+
    "\0\u49dc\0\u4a16\0\u0122\0\u0122\0\u0122\0\u0122\0\u4a50\0\u4a8a"+
    "\0\u0122\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u0122\0\u0122"+
    "\0\u0122\0\u4be6\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122\0\u0122"+
    "\0\u4c20\0\u4c5a\0\u0122\0\u4c94\0\u0122\0\u0122\0\u4cce\0\u0122"+
    "\0\u0122\0\u4d08\0\u4d42\0\u4d7c\0\u0122\0\u0122\0\u4db6\0\u4df0"+
    "\0\u4e2a\0\u0122\0\u4e64\0\u4e9e\0\u4ed8\0\u0122\0\u0122\0\u4f12"+
    "\0\u4f4c\0\u4f86\0\u0122\0\u4fc0\0\u0122\0\u4ffa\0\u5034\0\u506e"+
    "\0\u50a8\0\u50e2\0\u511c\0\u5156\0\u0122\0\u0122\0\u0122\0\u5190"+
    "\0\72\0\u51ca\0\u0122\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec"+
    "\0\u5326\0\u0122\0\u0122\0\u5360\0\u539a\0\u0122\0\u53d4\0\u0122"+
    "\0\u0122\0\u0122\0\u540e\0\u5448\0\u5482\0\u0122\0\u0122\0\u54bc"+
    "\0\u0122\0\u54f6\0\u5530\0\u556a\0\u55a4\0\u55de\0\u5618\0\u0122"+
    "\0\u0122\0\u5652\0\u568c\0\u56c6\0\u5700\0\u0122\0\u0122\0\u0122"+
    "\0\u573a\0\u5774\0\72\0\u57ae\0\u57e8\0\u0122\0\u5822\0\u0122"+
    "\0\u585c\0\u5896\0\u58d0\0\u0122\0\u590a\0\u5944\0\u0122\0\u597e"+
    "\0\u59b8\0\u59f2\0\u0122\0\u0122\0\u0122\0\u5a2c\0\u0122\0\u5a66"+
    "\0\u5aa0\0\u0122\0\u5ada\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc"+
    "\0\u5c36\0\u0122\0\u0122\0\u5c70\0\u5caa\0\u5ce4\0\u0122\0\u0122"+
    "\0\u0122\0\u5d1e\0\u5d58\0\u5d92\0\u5dcc\0\u5e06\0\u0122\0\u5e40"+
    "\0\u0122\0\u0122\0\u0122\0\u5e7a\0\u0122\0\u0122\0\u0122\0\u0122"+
    "\0\u0122\0\u0122\0\u5eb4\0\u5eee\0\u0122\0\u0122\0\u0122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\4\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\7\1\32\1\7\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\7\1\41\1\42"+
    "\1\43\1\44\1\7\1\45\2\7\1\46\1\47\1\2"+
    "\1\50\1\7\1\51\1\52\1\2\74\0\1\3\67\0"+
    "\2\5\4\0\63\5\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\53\53\6\1\54\5\6\1\7\10\0\1\7"+
    "\7\0\4\7\4\0\32\7\3\0\1\7\2\0\1\7"+
    "\2\11\1\0\2\11\1\0\5\11\1\55\50\11\1\56"+
    "\5\11\21\0\4\57\4\0\1\60\3\0\1\61\1\62"+
    "\1\63\4\0\1\64\1\0\1\65\1\66\4\0\1\67"+
    "\44\0\1\70\61\0\1\57\1\0\4\16\10\0\1\71"+
    "\30\0\1\16\30\0\1\72\73\0\1\73\71\0\1\74"+
    "\71\0\1\75\42\0\1\7\10\0\1\7\7\0\4\7"+
    "\4\0\1\7\1\76\1\77\5\7\1\100\2\7\1\101"+
    "\1\102\1\103\4\7\1\104\1\105\6\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\1\106"+
    "\31\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\1\107\1\7\1\110\1\7\1\111\2\7"+
    "\1\112\3\7\1\113\1\114\1\7\1\115\3\7\1\116"+
    "\5\7\1\117\1\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\2\7\1\126\2\7\1\127\1\130\1\131"+
    "\1\132\1\133\1\7\1\134\1\135\1\136\6\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\13\7\1\137\1\7\1\140\3\7\1\141\5\7\1\142"+
    "\2\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\13\7\1\143\2\7\1\144\5\7\1\145"+
    "\5\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\16\7\1\146\13\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\1\147\1\7"+
    "\1\150\1\151\1\7\1\152\6\7\1\153\1\154\4\7"+
    "\1\155\7\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\10\7\1\156\21\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\4\7"+
    "\1\157\1\7\1\160\4\7\1\161\2\7\1\162\13\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\1\163\7\7\1\164\5\7\1\165\13\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\10\7\1\166\5\7\1\167\13\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\17\7\1\170"+
    "\12\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\1\171\20\7\1\172\10\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\4\7"+
    "\1\173\25\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\4\7\1\174\3\7\1\175\4\7"+
    "\1\176\2\7\1\177\2\7\1\200\1\201\5\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\1\202\6\7\1\203\11\7\1\204\6\7\1\205\1\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\22\7\1\206\7\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\7\7\1\207\11\7"+
    "\1\210\10\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\4\7\1\211\25\7\3\0\1\7"+
    "\2\0\1\7\1\6\1\212\2\6\1\212\1\213\64\6"+
    "\1\11\1\214\2\11\1\214\1\215\64\11\21\0\4\57"+
    "\10\0\1\71\30\0\1\57\51\0\1\216\74\0\1\217"+
    "\51\0\1\220\75\0\1\221\16\0\1\222\52\0\1\223"+
    "\16\0\1\224\52\0\1\225\106\0\1\226\71\0\1\227"+
    "\35\0\1\230\2\0\4\230\41\0\1\230\3\0\1\7"+
    "\10\0\1\7\7\0\4\7\4\0\22\7\1\231\7\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\16\7\1\232\13\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\14\7\1\233\1\234"+
    "\14\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\13\7\1\235\2\7\1\236\13\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\1\237\7\7\1\240\5\7\1\241\13\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\10\7"+
    "\1\242\21\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\10\7\1\243\21\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\1\244"+
    "\31\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\2\7\1\245\27\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\1\7\1\246"+
    "\11\7\1\247\6\7\1\250\7\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\16\7\1\251"+
    "\13\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\10\7\1\252\21\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\1\253\31\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\16\7\1\254\13\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\17\7\1\255\12\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\14\7\1\256\1\257\4\7\1\260\7\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\10\7\1\261\7\7\1\262\11\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\2\7\1\263"+
    "\27\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\1\7\1\264\1\265\17\7\1\266\1\267"+
    "\6\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\13\7\1\270\16\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\14\7\1\271"+
    "\1\7\1\272\13\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\10\7\1\273\21\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\1\274\4\7\1\275\21\7\1\276\2\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\13\7"+
    "\1\277\16\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\14\7\1\300\1\301\14\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\16\7\1\302\13\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\1\303\7\7\1\304\5\7"+
    "\1\305\13\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\10\7\1\306\21\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\24\7"+
    "\1\307\5\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\21\7\1\310\10\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\4\7"+
    "\1\311\25\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\10\7\1\312\7\7\1\313\11\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\1\314\31\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\22\7\1\315\7\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\3\7\1\316\26\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\21\7\1\317\10\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\10\7\1\320\6\7\1\321\12\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\16\7\1\322"+
    "\13\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\21\7\1\323\10\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\15\7\1\324"+
    "\14\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\23\7\1\325\6\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\1\7\1\326"+
    "\30\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\7\7\1\327\22\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\10\7\1\330"+
    "\4\7\1\331\14\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\10\7\1\332\21\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\1\333\16\7\1\334\12\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\2\7\1\335\1\336"+
    "\14\7\1\337\2\7\1\340\6\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\10\7\1\341"+
    "\21\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\15\7\1\342\14\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\15\7\1\343"+
    "\14\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\4\7\1\344\16\7\1\345\6\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\4\7\1\346\16\7\1\347\6\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\6\7\1\350"+
    "\23\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\27\7\1\351\2\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\15\7\1\352"+
    "\14\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\3\7\1\353\26\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\15\7\1\354"+
    "\14\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\15\7\1\355\14\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\4\7\1\356"+
    "\25\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\21\7\1\357\2\7\1\360\5\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\4\7\1\361\3\7\1\362\5\7\1\363\13\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\1\364\1\7\1\365\20\7\1\366\2\7\1\367\3\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\13\7\1\370\16\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\6\7\1\371\6\7"+
    "\1\372\14\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\6\7\1\373\23\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\21\7"+
    "\1\374\10\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\16\7\1\375\13\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\1\7"+
    "\1\376\30\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\15\7\1\377\14\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\4\7"+
    "\1\u0100\25\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\1\u0101\31\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\17\7\1\u0102"+
    "\12\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\4\7\1\u0103\25\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\4\7\1\u0104"+
    "\3\7\1\u0105\21\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\10\7\1\u0106\21\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\27\7\1\u0107\2\7\3\0\1\7\2\0\1\7\1\6"+
    "\1\212\2\6\1\212\1\213\2\6\1\53\53\6\1\54"+
    "\12\6\1\0\2\6\1\53\53\6\1\54\5\6\1\11"+
    "\1\214\2\11\1\214\1\215\5\11\1\55\50\11\1\56"+
    "\12\11\1\0\5\11\1\55\50\11\1\56\5\11\34\0"+
    "\1\u0108\54\0\1\u0109\116\0\1\u010a\44\0\1\u010b\71\0"+
    "\1\u010c\71\0\1\u010d\71\0\1\u010e\71\0\1\u010f\71\0"+
    "\1\u0110\127\0\1\u0111\35\0\4\230\41\0\1\230\3\0"+
    "\1\7\10\0\1\7\7\0\4\7\4\0\22\7\1\u0112"+
    "\7\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\1\u0113\31\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\23\7\1\u0114\6\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\16\7\1\u0115\13\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\6\7\1\u0116\23\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\27\7\1\u0117\2\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\15\7\1\u0118\14\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\3\7\1\u0119\26\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\15\7\1\u011a\14\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\15\7\1\u011b\14\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\15\7\1\u011c\14\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\12\7\1\u011d\17\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\22\7\1\u011e\7\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\13\7\1\u011f\16\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\4\7\1\u0120\25\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\22\7\1\u0121\7\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\13\7\1\u0122\16\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\21\7\1\u0123\10\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\6\7\1\u0124\13\7"+
    "\1\u0125\7\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\13\7\1\u0126\16\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\17\7"+
    "\1\u0127\12\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\11\7\1\u0128\11\7\1\u0129\6\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\7\7\1\u012a\22\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\15\7\1\u012b\14\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\21\7\1\u012c\10\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\13\7\1\u012d\16\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\22\7\1\u012e\7\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\16\7\1\u012f\13\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\10\7\1\u0130\21\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\1\u0131\31\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\4\7\1\u0132\25\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\17\7\1\u0133\12\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\22\7\1\u0134\7\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\14\7\1\u0135\15\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\13\7\1\u0136\16\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\1\u0137\31\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\17\7"+
    "\1\u0138\12\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\16\7\1\u0139\13\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\4\7"+
    "\1\u013a\25\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\23\7\1\u013b\6\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\6\7"+
    "\1\u013c\23\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\27\7\1\u013d\2\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\15\7"+
    "\1\u013e\14\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\3\7\1\u013f\26\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\15\7"+
    "\1\u0140\14\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\1\7\1\u0141\30\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\16\7"+
    "\1\u0142\13\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\1\u0143\31\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\6\7\1\u0144"+
    "\6\7\1\u0145\14\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\21\7\1\u0146\10\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\15\7\1\u0147\14\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\4\7\1\u0148\25\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\3\7\1\u0149\1\7\1\u014a\2\7\1\u014b\21\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\16\7\1\u014c\13\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\23\7\1\u014d\6\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\13\7\1\u014e\16\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\1\u014f\15\7\1\u0150\13\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\1\u0151\13\7\1\u0152\15\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\2\7\1\u0153"+
    "\27\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\16\7\1\u0154\13\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\22\7\1\u0155"+
    "\7\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\1\u0156\31\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\14\7\1\u0157\1\u0158"+
    "\14\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\10\7\1\u0159\21\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\27\7\1\u015a"+
    "\2\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\6\7\1\u015b\23\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\13\7\1\u015c"+
    "\16\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\13\7\1\u015d\16\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\4\7\1\u015e"+
    "\25\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\24\7\1\u015f\5\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\4\7\1\u0160"+
    "\25\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\6\7\1\u0161\23\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\3\7\1\u0162"+
    "\26\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\1\7\1\u0163\2\7\4\0\10\7\1\u0164\21\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\1\u0165\1\u0166"+
    "\2\7\4\0\32\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\1\u0167\1\u0168\2\7\4\0\32\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\24\7\1\u0169\5\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\23\7\1\u016a\6\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\4\7\1\u016b\25\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\15\7\1\u016c\14\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\1\u016d\31\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\22\7\1\u016e\7\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\2\7"+
    "\1\u016f\27\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\15\7\1\u0170\14\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\6\7"+
    "\1\u0171\23\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\3\7\1\u0172\7\7\1\u0173\16\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\24\7\1\u0174\5\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\24\7\1\u0175\5\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\10\7\1\u0176\21\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\4\7\1\u0177\25\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\15\7\1\u0178\14\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\7\7\1\u0179\22\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\13\7\1\u017a\16\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\23\7\1\u017b\6\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\17\7\1\u017c\12\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\21\7\1\u017d\10\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\7\7\1\u017e\22\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\15\7\1\u017f\14\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\15\7\1\u0180\14\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\4\7\1\u0181\25\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\21\7\1\u0182\10\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\13\7\1\u0183\16\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\23\7\1\u0184\6\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\23\7\1\u0185\6\7"+
    "\3\0\1\7\2\0\1\7\17\0\1\u0186\125\0\1\u0187"+
    "\53\0\1\u0188\34\0\1\7\10\0\1\7\7\0\4\7"+
    "\4\0\6\7\1\u0189\23\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\2\7\1\u018a\27\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\1\7"+
    "\1\u018b\2\7\4\0\32\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\1\u018c\1\u018d\2\7\4\0\32\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\1\u018e"+
    "\1\u018f\2\7\4\0\32\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\23\7\1\u0190\6\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\2\7"+
    "\1\u0191\1\7\4\0\32\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\22\7\1\u0192\7\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\10\7\1\u0193\21\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\1\u0194\31\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\4\7\1\u0195\25\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\27\7\1\u0196\2\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\13\7\1\u0197\16\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\6\7\1\u0198\23\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\1\u0199\7\7\1\u019a\21\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\23\7\1\u019b\6\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\4\7\1\u019c\25\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\22\7\1\u019d\7\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\15\7\1\u019e\14\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\15\7\1\u019f\14\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\13\7\1\u01a0\16\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\7\7\1\u01a1\22\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\13\7\1\u01a2\16\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\24\7\1\u01a3\5\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\1\u01a4\31\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\15\7\1\u01a5\14\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\1\7\1\u01a6"+
    "\2\7\4\0\32\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\1\7\1\u01a7\2\7\4\0\32\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\1\7\1\u01a8"+
    "\2\7\4\0\32\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\23\7\1\u01a9\6\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\13\7\1\u01aa\16\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\3\7\1\u01ab\26\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\13\7\1\u01ac\16\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\15\7\1\u01ad\14\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\7\7\1\u01ae\22\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\23\7\1\u01af\6\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\7\7\1\u01b0\22\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\10\7\1\u01b1\15\7\1\u01b2"+
    "\3\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\16\7\1\u01b3\13\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\10\7\1\u01b4"+
    "\21\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\5\7\1\u01b5\24\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\21\7\1\u01b6"+
    "\10\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\10\7\1\u01b7\21\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\23\7\1\u01b8"+
    "\6\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\21\7\1\u01b9\10\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\13\7\1\u01ba"+
    "\16\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\1\u01bb\31\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\23\7\1\u01bc\6\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\21\7\1\u01bd\10\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\23\7\1\u01be\6\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\15\7\1\u01bf\14\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\10\7\1\u01c0\21\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\24\7\1\u01c1\5\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\27\7\1\u01c2\2\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\10\7\1\u01c3\21\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\6\7\1\u01c4\12\7"+
    "\1\u01c5\10\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\15\7\1\u01c6\14\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\1\u01c7\3\7\4\0"+
    "\32\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\2\7\1\u01c8\27\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\13\7\1\u01c9"+
    "\16\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\14\7\1\u01ca\15\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\4\7\1\u01cb"+
    "\25\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\10\7\1\u01cc\21\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\23\7\1\u01cd"+
    "\6\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\21\7\1\u01ce\10\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\21\7\1\u01cf"+
    "\10\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\21\7\1\u01d0\10\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\15\7\1\u01d1"+
    "\14\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\2\7\1\u01d2\27\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\16\7\1\u01d3"+
    "\13\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\22\7\1\u01d4\7\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\4\7\1\u01d5"+
    "\25\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\4\7\1\u01d6\25\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\4\7\1\u01d7"+
    "\25\7\3\0\1\7\2\0\1\7\35\0\1\u01d8\53\0"+
    "\1\u01d9\52\0\1\7\10\0\1\7\7\0\4\7\4\0"+
    "\1\u01da\31\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\1\u01db\3\7\4\0\32\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\17\7\1\u01dc"+
    "\12\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\15\7\1\u01dd\14\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\2\7\1\u01de"+
    "\27\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\4\7\1\u01df\25\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\10\7\1\u01e0"+
    "\21\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\15\7\1\u01e1\14\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\2\7\1\u01e2\1\7\4\0"+
    "\32\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\27\7\1\u01e3\2\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\16\7\1\u01e4"+
    "\13\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\13\7\1\u01e5\16\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\23\7\1\u01e6"+
    "\6\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\22\7\1\u01e7\7\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\1\u01e8\3\7\4\0\32\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\4\7\1\u01e9\25\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\5\7\1\u01ea\24\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\7\7\1\u01eb\22\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\13\7\1\u01ec\16\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\2\7\1\u01ed\27\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\13\7\1\u01ee\16\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\23\7\1\u01ef\6\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\10\7\1\u01f0\21\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\23\7\1\u01f1\6\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\2\7\1\u01f2\27\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\3\7\1\u01f3\26\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\21\7\1\u01f4\10\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\4\7\1\u01f5\25\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\5\7\1\u01f6\24\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\1\u01f7\31\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\4\7\1\u01f8\11\7\1\u01f9"+
    "\13\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\4\7\1\u01fa\25\7\3\0\1\7\2\0"+
    "\2\7\10\0\1\7\7\0\4\7\4\0\22\7\1\u01fb"+
    "\7\7\3\0\1\7\2\0\2\7\10\0\1\7\7\0"+
    "\4\7\4\0\1\u01fc\31\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\22\7\1\u01fd\7\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\15\7\1\u01fe\14\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\3\7\1\u01ff\26\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\23\7\1\u0200\6\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\24\7\1\u0201\5\7"+
    "\3\0\1\7\2\0\2\7\10\0\1\7\7\0\4\7"+
    "\4\0\5\7\1\u0202\24\7\3\0\1\7\2\0\1\7"+
    "\17\0\1\u0203\52\0\1\7\10\0\1\7\7\0\4\7"+
    "\4\0\23\7\1\u0204\6\7\3\0\1\7\2\0\2\7"+
    "\10\0\1\7\7\0\4\7\4\0\1\u0205\31\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\6\7\1\u0206\23\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\23\7\1\u0207\6\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\27\7\1\u0208\2\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\15\7\1\u0209\14\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\24\7\1\u020a\5\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\2\7\1\u020b\27\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\23\7\1\u020c\6\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\10\7\1\u020d\21\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\4\7\1\u020e\25\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\4\7\1\u020f\25\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\10\7\1\u0210\21\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\16\7\1\u0211\13\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\10\7\1\u0212\21\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\4\7\1\u0213\25\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\4\7\1\u0214\25\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\21\7\1\u0215\10\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\1\u0216\31\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\13\7\1\u0217\16\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\23\7"+
    "\1\u0218\6\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\10\7\1\u0219\21\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\14\7"+
    "\1\u021a\15\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\10\7\1\u021b\21\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\23\7"+
    "\1\u021c\6\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\4\7\1\u021d\25\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\1\u021e"+
    "\3\7\1\u021f\25\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\2\7\1\u0220\27\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\4\7\1\u0221\25\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\22\7\1\u0222\7\7\3\0"+
    "\1\7\2\0\2\7\10\0\1\7\7\0\4\7\4\0"+
    "\4\7\1\u0223\25\7\3\0\1\7\2\0\2\7\10\0"+
    "\1\7\7\0\4\7\4\0\1\u0224\31\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\16\7"+
    "\1\u0225\13\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\21\7\1\u0226\10\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\23\7"+
    "\1\u0227\6\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\15\7\1\u0228\14\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\23\7"+
    "\1\u0229\6\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\2\7\1\u022a\27\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\4\7"+
    "\1\u022b\25\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\16\7\1\u022c\13\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\25\7"+
    "\1\u022d\4\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\10\7\1\u022e\21\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\21\7"+
    "\1\u022f\10\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\1\7\1\u0230\30\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\3\7"+
    "\1\u0231\26\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\4\7\1\u0232\25\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\21\7"+
    "\1\u0233\10\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\23\7\1\u0234\6\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\15\7"+
    "\1\u0235\14\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\4\7\1\u0236\25\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\4\7"+
    "\1\u0237\25\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\21\7\1\u0238\10\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\15\7"+
    "\1\u0239\14\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\4\7\1\u023a\25\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\15\7"+
    "\1\u023b\14\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\13\7\1\u023c\16\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\4\7"+
    "\1\u023d\25\7\3\0\1\7\2\0\2\7\10\0\1\7"+
    "\7\0\4\7\4\0\4\7\1\u023e\25\7\3\0\1\7"+
    "\2\0\2\7\10\0\1\7\7\0\4\7\4\0\4\7"+
    "\1\u023f\25\7\3\0\1\7\2\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\1\1\2\11\33\1\5\11"+
    "\1\0\1\11\1\0\1\1\10\0\1\11\1\1\4\11"+
    "\120\1\12\0\160\1\1\0\1\11\1\0\6\11\1\0"+
    "\164\1\1\11\2\0\117\1\1\0\1\11\51\1\1\11"+
    "\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[575];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FortranLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public FortranToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return FortranToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return FortranToken.BAD_CHARACTER;
            }
            // fall through
          case 187: break;
          case 2:
            { return FortranToken.WHITESPACE;
            }
            // fall through
          case 188: break;
          case 3:
            { return FortranToken.LINE_COMMENT;
            }
            // fall through
          case 189: break;
          case 4:
            { return FortranToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 190: break;
          case 5:
            { return FortranToken.IDENTIFIER;
            }
            // fall through
          case 191: break;
          case 6:
            { return FortranToken.AND_OPERATOR;
            }
            // fall through
          case 192: break;
          case 7:
            { return FortranToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 193: break;
          case 8:
            { return FortranToken.LPAREN;
            }
            // fall through
          case 194: break;
          case 9:
            { return FortranToken.RPAREN;
            }
            // fall through
          case 195: break;
          case 10:
            { return FortranToken.NUMBER_LITERAL;
            }
            // fall through
          case 196: break;
          case 11:
            { return FortranToken.LT_OPERATOR;
            }
            // fall through
          case 197: break;
          case 12:
            { return FortranToken.EQ_OPERATOR;
            }
            // fall through
          case 198: break;
          case 13:
            { return FortranToken.GT_OPERATOR;
            }
            // fall through
          case 199: break;
          case 14:
            { return FortranToken.LBRACK;
            }
            // fall through
          case 200: break;
          case 15:
            { return FortranToken.RBRACK;
            }
            // fall through
          case 201: break;
          case 16:
            { return FortranToken.LBRACE;
            }
            // fall through
          case 202: break;
          case 17:
            { return FortranToken.RBRACE;
            }
            // fall through
          case 203: break;
          case 18:
            { return FortranToken.DIVEQ;
            }
            // fall through
          case 204: break;
          case 19:
            { return FortranToken.DOUBLE_COLON;
            }
            // fall through
          case 205: break;
          case 20:
            { return FortranToken.LTEQ;
            }
            // fall through
          case 206: break;
          case 21:
            { return FortranToken.EQEQ;
            }
            // fall through
          case 207: break;
          case 22:
            { return FortranToken.GTEQ;
            }
            // fall through
          case 208: break;
          case 23:
            { return FortranToken.DO;
            }
            // fall through
          case 209: break;
          case 24:
            { return FortranToken.IF;
            }
            // fall through
          case 210: break;
          case 25:
            { return FortranToken.ABS;
            }
            // fall through
          case 211: break;
          case 26:
            { return FortranToken.COS;
            }
            // fall through
          case 212: break;
          case 27:
            { return FortranToken.DIM;
            }
            // fall through
          case 213: break;
          case 28:
            { return FortranToken.END;
            }
            // fall through
          case 214: break;
          case 29:
            { return FortranToken.EXP;
            }
            // fall through
          case 215: break;
          case 30:
            { return FortranToken.INT;
            }
            // fall through
          case 216: break;
          case 31:
            { return FortranToken.LEN;
            }
            // fall through
          case 217: break;
          case 32:
            { return FortranToken.LGE;
            }
            // fall through
          case 218: break;
          case 33:
            { return FortranToken.LGT;
            }
            // fall through
          case 219: break;
          case 34:
            { return FortranToken.LLE;
            }
            // fall through
          case 220: break;
          case 35:
            { return FortranToken.LLT;
            }
            // fall through
          case 221: break;
          case 36:
            { return FortranToken.LOG;
            }
            // fall through
          case 222: break;
          case 37:
            { return FortranToken.MAX;
            }
            // fall through
          case 223: break;
          case 38:
            { return FortranToken.MIN;
            }
            // fall through
          case 224: break;
          case 39:
            { return FortranToken.MOD;
            }
            // fall through
          case 225: break;
          case 40:
            { return FortranToken.SIN;
            }
            // fall through
          case 226: break;
          case 41:
            { return FortranToken.TAN;
            }
            // fall through
          case 227: break;
          case 42:
            { return FortranToken.USE;
            }
            // fall through
          case 228: break;
          case 43:
            { return FortranToken.EQ;
            }
            // fall through
          case 229: break;
          case 44:
            { return FortranToken.GE;
            }
            // fall through
          case 230: break;
          case 45:
            { return FortranToken.GT;
            }
            // fall through
          case 231: break;
          case 46:
            { return FortranToken.LE;
            }
            // fall through
          case 232: break;
          case 47:
            { return FortranToken.LT;
            }
            // fall through
          case 233: break;
          case 48:
            { return FortranToken.NE;
            }
            // fall through
          case 234: break;
          case 49:
            { return FortranToken.OR;
            }
            // fall through
          case 235: break;
          case 50:
            { return FortranToken.ACOS;
            }
            // fall through
          case 236: break;
          case 51:
            { return FortranToken.AINT;
            }
            // fall through
          case 237: break;
          case 52:
            { return FortranToken.ALOG;
            }
            // fall through
          case 238: break;
          case 53:
            { return FortranToken.AMOD;
            }
            // fall through
          case 239: break;
          case 54:
            { return FortranToken.ASIN;
            }
            // fall through
          case 240: break;
          case 55:
            { return FortranToken.ATAN;
            }
            // fall through
          case 241: break;
          case 56:
            { return FortranToken.CABS;
            }
            // fall through
          case 242: break;
          case 57:
            { return FortranToken.CALL;
            }
            // fall through
          case 243: break;
          case 58:
            { return FortranToken.CASE;
            }
            // fall through
          case 244: break;
          case 59:
            { return FortranToken.CCOS;
            }
            // fall through
          case 245: break;
          case 60:
            { return FortranToken.CHAR;
            }
            // fall through
          case 246: break;
          case 61:
            { return FortranToken.CLOG;
            }
            // fall through
          case 247: break;
          case 62:
            { return FortranToken.COSH;
            }
            // fall through
          case 248: break;
          case 63:
            { return FortranToken.CSIN;
            }
            // fall through
          case 249: break;
          case 64:
            { return FortranToken.DABS;
            }
            // fall through
          case 250: break;
          case 65:
            { return FortranToken.DATA;
            }
            // fall through
          case 251: break;
          case 66:
            { return FortranToken.DBLE;
            }
            // fall through
          case 252: break;
          case 67:
            { return FortranToken.DCOS;
            }
            // fall through
          case 253: break;
          case 68:
            { return FortranToken.DDIM;
            }
            // fall through
          case 254: break;
          case 69:
            { return FortranToken.DEXP;
            }
            // fall through
          case 255: break;
          case 70:
            { return FortranToken.DINT;
            }
            // fall through
          case 256: break;
          case 71:
            { return FortranToken.DLOG;
            }
            // fall through
          case 257: break;
          case 72:
            { return FortranToken.DMOD;
            }
            // fall through
          case 258: break;
          case 73:
            { return FortranToken.DSIN;
            }
            // fall through
          case 259: break;
          case 74:
            { return FortranToken.DTAN;
            }
            // fall through
          case 260: break;
          case 75:
            { return FortranToken.ELSE;
            }
            // fall through
          case 261: break;
          case 76:
            { return FortranToken.EXIT;
            }
            // fall through
          case 262: break;
          case 77:
            { return FortranToken.GOTO;
            }
            // fall through
          case 263: break;
          case 78:
            { return FortranToken.IABS;
            }
            // fall through
          case 264: break;
          case 79:
            { return FortranToken.IDIM;
            }
            // fall through
          case 265: break;
          case 80:
            { return FortranToken.IFIX;
            }
            // fall through
          case 266: break;
          case 81:
            { return FortranToken.IMAG;
            }
            // fall through
          case 267: break;
          case 82:
            { return FortranToken.KIND;
            }
            // fall through
          case 268: break;
          case 83:
            { return FortranToken.MAX0;
            }
            // fall through
          case 269: break;
          case 84:
            { return FortranToken.MAX1;
            }
            // fall through
          case 270: break;
          case 85:
            { return FortranToken.MIN0;
            }
            // fall through
          case 271: break;
          case 86:
            { return FortranToken.MIN1;
            }
            // fall through
          case 272: break;
          case 87:
            { return FortranToken.NINT;
            }
            // fall through
          case 273: break;
          case 88:
            { return FortranToken.NONE;
            }
            // fall through
          case 274: break;
          case 89:
            { return FortranToken.OPEN;
            }
            // fall through
          case 275: break;
          case 90:
            { return FortranToken.READ;
            }
            // fall through
          case 276: break;
          case 91:
            { return FortranToken.REAL;
            }
            // fall through
          case 277: break;
          case 92:
            { return FortranToken.SIGN;
            }
            // fall through
          case 278: break;
          case 93:
            { return FortranToken.SINH;
            }
            // fall through
          case 279: break;
          case 94:
            { return FortranToken.SNGL;
            }
            // fall through
          case 280: break;
          case 95:
            { return FortranToken.SQRT;
            }
            // fall through
          case 281: break;
          case 96:
            { return FortranToken.STOP;
            }
            // fall through
          case 282: break;
          case 97:
            { return FortranToken.TANH;
            }
            // fall through
          case 283: break;
          case 98:
            { return FortranToken.THEN;
            }
            // fall through
          case 284: break;
          case 99:
            { return FortranToken.TYPE;
            }
            // fall through
          case 285: break;
          case 100:
            { return FortranToken.ZEXT;
            }
            // fall through
          case 286: break;
          case 101:
            { return FortranToken.AND;
            }
            // fall through
          case 287: break;
          case 102:
            { return FortranToken.AIMAG;
            }
            // fall through
          case 288: break;
          case 103:
            { return FortranToken.AMAX0;
            }
            // fall through
          case 289: break;
          case 104:
            { return FortranToken.AMAX1;
            }
            // fall through
          case 290: break;
          case 105:
            { return FortranToken.AMIN0;
            }
            // fall through
          case 291: break;
          case 106:
            { return FortranToken.AMIN1;
            }
            // fall through
          case 292: break;
          case 107:
            { return FortranToken.ANINT;
            }
            // fall through
          case 293: break;
          case 108:
            { return FortranToken.ATAN2;
            }
            // fall through
          case 294: break;
          case 109:
            { return FortranToken.CLOSE;
            }
            // fall through
          case 295: break;
          case 110:
            { return FortranToken.CMPLX;
            }
            // fall through
          case 296: break;
          case 111:
            { return FortranToken.CONJG;
            }
            // fall through
          case 297: break;
          case 112:
            { return FortranToken.CSQRT;
            }
            // fall through
          case 298: break;
          case 113:
            { return FortranToken.CYCLE;
            }
            // fall through
          case 299: break;
          case 114:
            { return FortranToken.DACOS;
            }
            // fall through
          case 300: break;
          case 115:
            { return FortranToken.DASIN;
            }
            // fall through
          case 301: break;
          case 116:
            { return FortranToken.DATAN;
            }
            // fall through
          case 302: break;
          case 117:
            { return FortranToken.DCOSH;
            }
            // fall through
          case 303: break;
          case 118:
            { return FortranToken.DMAX1;
            }
            // fall through
          case 304: break;
          case 119:
            { return FortranToken.DMIN1;
            }
            // fall through
          case 305: break;
          case 120:
            { return FortranToken.DNINT;
            }
            // fall through
          case 306: break;
          case 121:
            { return FortranToken.DPROD;
            }
            // fall through
          case 307: break;
          case 122:
            { return FortranToken.DREAL;
            }
            // fall through
          case 308: break;
          case 123:
            { return FortranToken.DSIGN;
            }
            // fall through
          case 309: break;
          case 124:
            { return FortranToken.DSINH;
            }
            // fall through
          case 310: break;
          case 125:
            { return FortranToken.DSQRT;
            }
            // fall through
          case 311: break;
          case 126:
            { return FortranToken.DTANH;
            }
            // fall through
          case 312: break;
          case 127:
            { return FortranToken.ENDDO;
            }
            // fall through
          case 313: break;
          case 128:
            { return FortranToken.ENDIF;
            }
            // fall through
          case 314: break;
          case 129:
            { return FortranToken.ERROR;
            }
            // fall through
          case 315: break;
          case 130:
            { return FortranToken.FLOAT;
            }
            // fall through
          case 316: break;
          case 131:
            { return FortranToken.FLOOR;
            }
            // fall through
          case 317: break;
          case 132:
            { return FortranToken.ICHAR;
            }
            // fall through
          case 318: break;
          case 133:
            { return FortranToken.IDINT;
            }
            // fall through
          case 319: break;
          case 134:
            { return FortranToken.INDEX;
            }
            // fall through
          case 320: break;
          case 135:
            { return FortranToken.ISIGN;
            }
            // fall through
          case 321: break;
          case 136:
            { return FortranToken.LOG10;
            }
            // fall through
          case 322: break;
          case 137:
            { return FortranToken.PAUSE;
            }
            // fall through
          case 323: break;
          case 138:
            { return FortranToken.PRINT;
            }
            // fall through
          case 324: break;
          case 139:
            { return FortranToken.WHERE;
            }
            // fall through
          case 325: break;
          case 140:
            { return FortranToken.WHILE;
            }
            // fall through
          case 326: break;
          case 141:
            { return FortranToken.WRITE;
            }
            // fall through
          case 327: break;
          case 142:
            { return FortranToken.TRUE;
            }
            // fall through
          case 328: break;
          case 143:
            { return FortranToken.ALOG10;
            }
            // fall through
          case 329: break;
          case 144:
            { return FortranToken.DATAN2;
            }
            // fall through
          case 330: break;
          case 145:
            { return FortranToken.DCMPLX;
            }
            // fall through
          case 331: break;
          case 146:
            { return FortranToken.DFLOAT;
            }
            // fall through
          case 332: break;
          case 147:
            { return FortranToken.DLOG10;
            }
            // fall through
          case 333: break;
          case 148:
            { return FortranToken.DOUBLE;
            }
            // fall through
          case 334: break;
          case 149:
            { return FortranToken.ELSEIF;
            }
            // fall through
          case 335: break;
          case 150:
            { return FortranToken.FORALL;
            }
            // fall through
          case 336: break;
          case 151:
            { return FortranToken.FORMAT;
            }
            // fall through
          case 337: break;
          case 152:
            { return FortranToken.IDNINT;
            }
            // fall through
          case 338: break;
          case 153:
            { return FortranToken.MODULE;
            }
            // fall through
          case 339: break;
          case 154:
            { return FortranToken.MODULO;
            }
            // fall through
          case 340: break;
          case 155:
            { return FortranToken.RETURN;
            }
            // fall through
          case 341: break;
          case 156:
            { return FortranToken.REWIND;
            }
            // fall through
          case 342: break;
          case 157:
            { return FortranToken.SELECT;
            }
            // fall through
          case 343: break;
          case 158:
            { return FortranToken.FALSE;
            }
            // fall through
          case 344: break;
          case 159:
            { return FortranToken.CEILING;
            }
            // fall through
          case 345: break;
          case 160:
            { return FortranToken.COMPLEX;
            }
            // fall through
          case 346: break;
          case 161:
            { return FortranToken.DEFAULT;
            }
            // fall through
          case 347: break;
          case 162:
            { return FortranToken.ENDFILE;
            }
            // fall through
          case 348: break;
          case 163:
            { return FortranToken.INCLUDE;
            }
            // fall through
          case 349: break;
          case 164:
            { return FortranToken.INQUIRE;
            }
            // fall through
          case 350: break;
          case 165:
            { return FortranToken.INTEGER;
            }
            // fall through
          case 351: break;
          case 166:
            { return FortranToken.LOGICAL;
            }
            // fall through
          case 352: break;
          case 167:
            { return FortranToken.PROGRAM;
            }
            // fall through
          case 353: break;
          case 168:
            { return FortranToken.ALLOCATE;
            }
            // fall through
          case 354: break;
          case 169:
            { return FortranToken.CONTAINS;
            }
            // fall through
          case 355: break;
          case 170:
            { return FortranToken.CONTINUE;
            }
            // fall through
          case 356: break;
          case 171:
            { return FortranToken.EXPLICIT;
            }
            // fall through
          case 357: break;
          case 172:
            { return FortranToken.FUNCTION;
            }
            // fall through
          case 358: break;
          case 173:
            { return FortranToken.IMPLICIT;
            }
            // fall through
          case 359: break;
          case 174:
            { return FortranToken.TRANSFER;
            }
            // fall through
          case 360: break;
          case 175:
            { return FortranToken.ALLOCATED;
            }
            // fall through
          case 361: break;
          case 176:
            { return FortranToken.BACKSPACE;
            }
            // fall through
          case 362: break;
          case 177:
            { return FortranToken.CHARACTER;
            }
            // fall through
          case 363: break;
          case 178:
            { return FortranToken.DIMENSION;
            }
            // fall through
          case 364: break;
          case 179:
            { return FortranToken.ELSEWHERE;
            }
            // fall through
          case 365: break;
          case 180:
            { return FortranToken.INTERFACE;
            }
            // fall through
          case 366: break;
          case 181:
            { return FortranToken.PARAMETER;
            }
            // fall through
          case 367: break;
          case 182:
            { return FortranToken.PRECISION;
            }
            // fall through
          case 368: break;
          case 183:
            { return FortranToken.RECURSIVE;
            }
            // fall through
          case 369: break;
          case 184:
            { return FortranToken.DEALLOCATE;
            }
            // fall through
          case 370: break;
          case 185:
            { return FortranToken.SUBROUTINE;
            }
            // fall through
          case 371: break;
          case 186:
            { return FortranToken.ALLOCATABLE;
            }
            // fall through
          case 372: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
